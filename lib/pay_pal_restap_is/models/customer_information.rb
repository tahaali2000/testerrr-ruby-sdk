# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The details about a customer in PayPal's system of record.
  class CustomerInformation < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The unique ID for a customer generated by PayPal.
    # @return [String]
    attr_accessor :id

    # The internationalized email address.<blockquote><strong>Note:</strong> Up
    # to 64 characters are allowed before and 255 characters are allowed after
    # the <code>@</code> sign. However, the generally accepted maximum length
    # for an email address is 254 characters. The pattern verifies that an
    # unquoted <code>@</code> sign exists.</blockquote>
    # @return [String]
    attr_accessor :email_address

    # The phone information.
    # @return [PhoneWithType]
    attr_accessor :phone

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['email_address'] = 'email_address'
      @_hash['phone'] = 'phone'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        email_address
        phone
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, email_address = SKIP, phone = SKIP)
      @id = id unless id == SKIP
      @email_address = email_address unless email_address == SKIP
      @phone = phone unless phone == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      email_address = hash.key?('email_address') ? hash['email_address'] : SKIP
      phone = PhoneWithType.from_hash(hash['phone']) if hash['phone']

      # Create object from extracted values.
      CustomerInformation.new(id,
                              email_address,
                              phone)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, email_address: #{@email_address}, phone: #{@phone}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, email_address: #{@email_address.inspect}, phone:"\
      " #{@phone.inspect}>"
    end
  end
end

# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # OrdersController
  class OrdersController < BaseController
    # Creates an order. Merchants and partners can add Level 2 and 3 data to
    # payments to reduce risk and payment processing costs. For more information
    # about processing payments, see <a
    # href="https://developer.paypal.com/docs/checkout/advanced/processing/">che
    # ckout</a> or <a
    # href="https://developer.paypal.com/docs/multiparty/checkout/advanced/proce
    # ssing/">multiparty checkout</a>.<blockquote><strong>Note:</strong> For
    # error handling and troubleshooting, see <a
    # href="/api/rest/reference/orders/v2/errors/#create-order">Orders v2
    # errors</a>.</blockquote>
    # @param [OrderRequest] body Required parameter: Example:
    # @param [String] pay_pal_request_id Optional parameter: The server stores
    # keys for 6 hours. The API callers can request the times to up to 72 hours
    # by speaking to their Account Manager.
    # @param [String] pay_pal_partner_attribution_id Optional parameter:
    # Example:
    # @param [String] pay_pal_client_metadata_id Optional parameter: Example:
    # @param [String] prefer Optional parameter: The preferred server response
    # upon successful completion of the request. Value
    # is:<ul><li><code>return=minimal</code>. The server returns a minimal
    # response to optimize communication between the API caller and the server.
    # A minimal response includes the <code>id</code>, <code>status</code> and
    # HATEOAS links.</li><li><code>return=representation</code>. The server
    # returns a complete resource representation, including the current state of
    # the resource.</li></ul>
    # @return [Order] response from the API call.
    def orders_create(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v2/checkout/orders',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(options['body']))
                   .header_param(new_parameter(options['pay_pal_request_id'], key: 'PayPal-Request-Id'))
                   .header_param(new_parameter(options['pay_pal_partner_attribution_id'], key: 'PayPal-Partner-Attribution-Id'))
                   .header_param(new_parameter(options['pay_pal_client_metadata_id'], key: 'PayPal-Client-Metadata-Id'))
                   .header_param(new_parameter(options['prefer'], key: 'Prefer'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Order.method(:from_hash))
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('401',
                                 'Authentication failed due to missing authorization header, or'\
                                  ' invalid authentication credentials.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Shows details for an order, by ID.<blockquote><strong>Note:</strong> For
    # error handling and troubleshooting, see <a
    # href="/api/rest/reference/orders/v2/errors/#get-order">Orders v2
    # errors</a>.</blockquote>
    # @param [String] id Required parameter: The ID of the order for which to
    # show details.
    # @param [String] fields Optional parameter: A comma-separated list of
    # fields that should be returned for the order. Valid filter field is
    # `payment_source`.
    # @return [Order] response from the API call.
    def orders_get(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/v2/checkout/orders/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .query_param(new_parameter(options['fields'], key: 'fields'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Order.method(:from_hash))
                    .local_error('401',
                                 'Authentication failed due to missing authorization header, or'\
                                  ' invalid authentication credentials.',
                                 ErrorException)
                    .local_error('404',
                                 'The specified resource does not exist.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Updates an order with a `CREATED` or `APPROVED` status. You cannot update
    # an order with the `COMPLETED` status.<br/><br/>To make an update, you must
    # provide a `reference_id`. If you omit this value with an order that
    # contains only one purchase unit, PayPal sets the value to `default` which
    # enables you to use the path:
    # <code>\"/purchase_units/@reference_id=='default'/{attribute-or-object}\"</
    # code>. Merchants and partners can add Level 2 and 3 data to payments to
    # reduce risk and payment processing costs. For more information about
    # processing payments, see <a
    # href="https://developer.paypal.com/docs/checkout/advanced/processing/">che
    # ckout</a> or <a
    # href="https://developer.paypal.com/docs/multiparty/checkout/advanced/proce
    # ssing/">multiparty checkout</a>.<blockquote><strong>Note:</strong> For
    # error handling and troubleshooting, see <a
    # href=\"/api/rest/reference/orders/v2/errors/#patch-order\">Orders v2
    # errors</a>.</blockquote>Patchable attributes or
    # objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th
    # ></thead><tbody><tr><td><code>intent</code></td><td>replace</td><td></td><
    # /tr><tr><td><code>payer</code></td><td>replace, add</td><td>Using replace
    # op for <code>payer</code> will replace the whole <code>payer</code> object
    # with the value sent in
    # request.</td></tr><tr><td><code>purchase_units</code></td><td>replace,
    # add</td><td></td></tr><tr><td><code>purchase_units[].custom_id</code></td>
    # <td>replace, add,
    # remove</td><td></td></tr><tr><td><code>purchase_units[].description</code>
    # </td><td>replace, add,
    # remove</td><td></td></tr><tr><td><code>purchase_units[].payee.email</code>
    # </td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].shipping
    # .name</code></td><td>replace,
    # add</td><td></td></tr><tr><td><code>purchase_units[].shipping.email_addres
    # s</code></td><td>replace,
    # add</td><td></td></tr><tr><td><code>purchase_units[].shipping.phone_number
    # </code></td><td>replace,
    # add</td><td></td></tr><tr><td><code>purchase_units[].shipping.options</cod
    # e></td><td>replace,
    # add</td><td></td></tr><tr><td><code>purchase_units[].shipping.address</cod
    # e></td><td>replace,
    # add</td><td></td></tr><tr><td><code>purchase_units[].shipping.type</code><
    # /td><td>replace,
    # add</td><td></td></tr><tr><td><code>purchase_units[].soft_descriptor</code
    # ></td><td>replace,
    # remove</td><td></td></tr><tr><td><code>purchase_units[].amount</code></td>
    # <td>replace</td><td></td></tr><tr><td><code>purchase_units[].items</code><
    # /td><td>replace, add,
    # remove</td><td></td></tr><tr><td><code>purchase_units[].invoice_id</code><
    # /td><td>replace, add,
    # remove</td><td></td></tr><tr><td><code>purchase_units[].payment_instructio
    # n</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].
    # payment_instruction.disbursement_mode</code></td><td>replace</td><td>By
    # default, <code>disbursement_mode</code> is
    # <code>INSTANT</code>.</td></tr><tr><td><code>purchase_units[].payment_inst
    # ruction.payee_receivable_fx_rate_id</code></td><td>replace, add,
    # remove</td><td></td></tr><tr><td><code>purchase_units[].payment_instructio
    # n.platform_fees</code></td><td>replace, add,
    # remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data
    # .airline</code></td><td>replace, add,
    # remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data
    # .card</code></td><td>replace, add,
    # remove</td><td></td></tr><tr><td><code>application_context.client_configur
    # ation</code></td><td>replace, add</td><td></td></tr></tbody></table>
    # @param [String] id Required parameter: The ID of the order to update.
    # @param [Array[Patch]] body Optional parameter: Example:
    # @return [void] response from the API call.
    def orders_patch(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/v2/checkout/orders/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(options['body']))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('401',
                                 'Authentication failed due to missing authorization header, or'\
                                  ' invalid authentication credentials.',
                                 ErrorException)
                    .local_error('404',
                                 'The specified resource does not exist.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Payer confirms their intent to pay for the the Order with the given
    # payment source.
    # @param [String] id Required parameter: The ID of the order for which the
    # payer confirms their intent to pay.
    # @param [String] pay_pal_client_metadata_id Optional parameter: Example:
    # @param [String] prefer Optional parameter: The preferred server response
    # upon successful completion of the request. Value
    # is:<ul><li><code>return=minimal</code>. The server returns a minimal
    # response to optimize communication between the API caller and the server.
    # A minimal response includes the <code>id</code>, <code>status</code> and
    # HATEOAS links.</li><li><code>return=representation</code>. The server
    # returns a complete resource representation, including the current state of
    # the resource.</li></ul>
    # @param [ConfirmOrderRequest] body Optional parameter: Example:
    # @return [Order] response from the API call.
    def orders_confirm(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v2/checkout/orders/{id}/confirm-payment-source',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter(options['pay_pal_client_metadata_id'], key: 'PayPal-Client-Metadata-Id'))
                   .header_param(new_parameter(options['prefer'], key: 'Prefer'))
                   .body_param(new_parameter(options['body']))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Order.method(:from_hash))
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('403',
                                 'Authorization failed due to insufficient permissions.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('500',
                                 'An internal server error has occurred.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Authorizes payment for an order. To successfully authorize payment for an
    # order, the buyer must first approve the order or a valid payment_source
    # must be provided in the request. A buyer can approve the order upon being
    # redirected to the rel:approve URL that was returned in the HATEOAS links
    # in the create order response.<blockquote><strong>Note:</strong> For error
    # handling and troubleshooting, see <a
    # href="/api/rest/reference/orders/v2/errors/#authorize-order">Orders v2
    # errors</a>.</blockquote>
    # @param [String] id Required parameter: The ID of the order for which to
    # authorize.
    # @param [String] pay_pal_request_id Optional parameter: The server stores
    # keys for 6 hours. The API callers can request the times to up to 72 hours
    # by speaking to their Account Manager.
    # @param [String] prefer Optional parameter: The preferred server response
    # upon successful completion of the request. Value
    # is:<ul><li><code>return=minimal</code>. The server returns a minimal
    # response to optimize communication between the API caller and the server.
    # A minimal response includes the <code>id</code>, <code>status</code> and
    # HATEOAS links.</li><li><code>return=representation</code>. The server
    # returns a complete resource representation, including the current state of
    # the resource.</li></ul>
    # @param [String] pay_pal_client_metadata_id Optional parameter: Example:
    # @param [String] pay_pal_auth_assertion Optional parameter: An
    # API-caller-provided JSON Web Token (JWT) assertion that identifies the
    # merchant. For details, see <a
    # href="/api/rest/requests/#paypal-auth-assertion">PayPal-Auth-Assertion</a>
    # .
    # @param [OrderAuthorizeRequest] body Optional parameter: Example:
    # @return [OrderAuthorizeResponse] response from the API call.
    def orders_authorize(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v2/checkout/orders/{id}/authorize',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter(options['pay_pal_request_id'], key: 'PayPal-Request-Id'))
                   .header_param(new_parameter(options['prefer'], key: 'Prefer'))
                   .header_param(new_parameter(options['pay_pal_client_metadata_id'], key: 'PayPal-Client-Metadata-Id'))
                   .header_param(new_parameter(options['pay_pal_auth_assertion'], key: 'PayPal-Auth-Assertion'))
                   .body_param(new_parameter(options['body']))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(OrderAuthorizeResponse.method(:from_hash))
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('401',
                                 'Authentication failed due to missing authorization header, or'\
                                  ' invalid authentication credentials.',
                                 ErrorException)
                    .local_error('403',
                                 'The authorized payment failed due to insufficient permissions'\
                                  '.',
                                 ErrorException)
                    .local_error('404',
                                 'The specified resource does not exist.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('500',
                                 'An internal server error has occurred.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Captures payment for an order. To successfully capture payment for an
    # order, the buyer must first approve the order or a valid payment_source
    # must be provided in the request. A buyer can approve the order upon being
    # redirected to the rel:approve URL that was returned in the HATEOAS links
    # in the create order response.<blockquote><strong>Note:</strong> For error
    # handling and troubleshooting, see <a
    # href="/api/rest/reference/orders/v2/errors/#capture-order">Orders v2
    # errors</a>.</blockquote>
    # @param [String] id Required parameter: The ID of the order for which to
    # capture a payment.
    # @param [String] pay_pal_request_id Optional parameter: The server stores
    # keys for 6 hours. The API callers can request the times to up to 72 hours
    # by speaking to their Account Manager.
    # @param [String] prefer Optional parameter: The preferred server response
    # upon successful completion of the request. Value
    # is:<ul><li><code>return=minimal</code>. The server returns a minimal
    # response to optimize communication between the API caller and the server.
    # A minimal response includes the <code>id</code>, <code>status</code> and
    # HATEOAS links.</li><li><code>return=representation</code>. The server
    # returns a complete resource representation, including the current state of
    # the resource.</li></ul>
    # @param [String] pay_pal_client_metadata_id Optional parameter: Example:
    # @param [String] pay_pal_auth_assertion Optional parameter: An
    # API-caller-provided JSON Web Token (JWT) assertion that identifies the
    # merchant. For details, see <a
    # href="/api/rest/requests/#paypal-auth-assertion">PayPal-Auth-Assertion</a>
    # .
    # @param [OrderCaptureRequest] body Optional parameter: Example:
    # @return [Order] response from the API call.
    def orders_capture(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v2/checkout/orders/{id}/capture',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .header_param(new_parameter(options['pay_pal_request_id'], key: 'PayPal-Request-Id'))
                   .header_param(new_parameter(options['prefer'], key: 'Prefer'))
                   .header_param(new_parameter(options['pay_pal_client_metadata_id'], key: 'PayPal-Client-Metadata-Id'))
                   .header_param(new_parameter(options['pay_pal_auth_assertion'], key: 'PayPal-Auth-Assertion'))
                   .body_param(new_parameter(options['body']))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Order.method(:from_hash))
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('401',
                                 'Authentication failed due to missing authorization header, or'\
                                  ' invalid authentication credentials.',
                                 ErrorException)
                    .local_error('403',
                                 'The authorized payment failed due to insufficient permissions'\
                                  '.',
                                 ErrorException)
                    .local_error('404',
                                 'The specified resource does not exist.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('500',
                                 'An internal server error has occurred.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Adds tracking information for an Order.
    # @param [String] id Required parameter: The ID of the order that the
    # tracking information is associated with.
    # @param [OrderTrackerRequest] body Required parameter: Example:
    # @param [String] pay_pal_auth_assertion Optional parameter: An
    # API-caller-provided JSON Web Token (JWT) assertion that identifies the
    # merchant. For details, see <a
    # href="/api/rest/requests/#paypal-auth-assertion">PayPal-Auth-Assertion</a>
    # .
    # @return [Order] response from the API call.
    def orders_track_create(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/v2/checkout/orders/{id}/track',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(options['body']))
                   .header_param(new_parameter(options['pay_pal_auth_assertion'], key: 'PayPal-Auth-Assertion'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Order.method(:from_hash))
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('403',
                                 'Authorization failed due to insufficient permissions.',
                                 ErrorException)
                    .local_error('404',
                                 'The specified resource does not exist.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('500',
                                 'An internal server error has occurred.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end

    # Updates or cancels the tracking information for a PayPal order, by ID.
    # Updatable attributes or
    # objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th
    # ></thead><tbody></tr><tr><td><code>items</code></td><td>replace</td><td>Us
    # ing replace op for <code>items</code> will replace the entire
    # <code>items</code> object with the value sent in
    # request.</td></tr><tr><td><code>notify_payer</code></td><td>replace,
    # add</td><td></td></tr><tr><td><code>status</code></td><td>replace</td><td>
    # Only patching status to CANCELLED is currently
    # supported.</td></tr></tbody></table>
    # @param [String] id Required parameter: The ID of the order that the
    # tracking information is associated with.
    # @param [String] tracker_id Required parameter: The order tracking ID.
    # @param [Array[Patch]] body Optional parameter: Example:
    # @return [void] response from the API call.
    def orders_trackers_patch(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/v2/checkout/orders/{id}/trackers/{tracker_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(options['id'], key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(options['tracker_id'], key: 'tracker_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(options['body']))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Oauth2')))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('400',
                                 'Request is not well-formed, syntactically incorrect, or'\
                                  ' violates schema.',
                                 ErrorException)
                    .local_error('403',
                                 'Authorization failed due to insufficient permissions.',
                                 ErrorException)
                    .local_error('404',
                                 'The specified resource does not exist.',
                                 ErrorException)
                    .local_error('422',
                                 'The requested action could not be performed, semantically'\
                                  ' incorrect, or failed business validation.',
                                 ErrorException)
                    .local_error('500',
                                 'An internal server error has occurred.',
                                 ErrorException)
                    .local_error('default',
                                 'The error response.',
                                 ErrorException))
        .execute
    end
  end
end

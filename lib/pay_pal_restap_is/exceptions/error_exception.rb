# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The error details.
  class ErrorException < APIException
    SKIP = Object.new
    private_constant :SKIP

    # The human-readable, unique name of the error.
    # @return [String]
    attr_accessor :name

    # The message that describes the error.
    # @return [String]
    attr_accessor :message

    # The PayPal internal ID. Used for correlation purposes.
    # @return [String]
    attr_accessor :debug_id

    # An array of additional details about the error.
    # @return [Array[ErrorDetails]]
    attr_accessor :details

    # An array of request-related [HATEOAS
    # links](/api/rest/responses/#hateoas-links).
    # @return [Array[LinkDescription]]
    attr_accessor :links

    # The constructor.
    # @param [String] The reason for raising an exception.
    # @param [HttpResponse] The HttpReponse of the API call.
    def initialize(reason, response)
      super(reason, response)
      hash = APIHelper.json_deserialize(@response.raw_body)
      unbox(hash)
    end

    # Populates this object by extracting properties from a hash.
    # @param [Hash] The deserialized response sent by the server in the
    # response body.
    def unbox(hash)
      @name = hash.key?('name') ? hash['name'] : nil
      @message = hash.key?('message') ? hash['message'] : nil
      @debug_id = hash.key?('debug_id') ? hash['debug_id'] : nil
      # Parameter is an array, so we need to iterate through it
      @details = nil
      unless hash['details'].nil?
        @details = []
        hash['details'].each do |structure|
          @details << (ErrorDetails.from_hash(structure) if structure)
        end
      end

      @details = SKIP unless hash.key?('details')
      # Parameter is an array, so we need to iterate through it
      @links = nil
      unless hash['links'].nil?
        @links = []
        hash['links'].each do |structure|
          @links << (LinkDescription.from_hash(structure) if structure)
        end
      end

      @links = SKIP unless hash.key?('links')
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name}, message: #{@message}, debug_id: #{@debug_id}, details:"\
      " #{@details}, links: #{@links}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name.inspect}, message: #{@message.inspect}, debug_id:"\
      " #{@debug_id.inspect}, details: #{@details.inspect}, links: #{@links.inspect}>"
    end
  end
end

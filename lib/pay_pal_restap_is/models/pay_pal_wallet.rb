# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # A resource that identifies a PayPal Wallet is used for payment.
  class PayPalWallet < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The PayPal-generated ID for the vaulted payment source. This ID should be
    # stored on the merchant's server so the saved payment source can be used
    # for future transactions.
    # @return [String]
    attr_accessor :vault_id

    # The internationalized email address.<blockquote><strong>Note:</strong> Up
    # to 64 characters are allowed before and 255 characters are allowed after
    # the <code>@</code> sign. However, the generally accepted maximum length
    # for an email address is 254 characters. The pattern verifies that an
    # unquoted <code>@</code> sign exists.</blockquote>
    # @return [String]
    attr_accessor :email_address

    # The name of the party.
    # @return [Name]
    attr_accessor :name

    # The phone information.
    # @return [PhoneWithType]
    attr_accessor :phone

    # The stand-alone date, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent
    # special legal values, such as a date of birth, you should use dates with
    # no associated time or time-zone data. Whenever possible, use the standard
    # `date_time` type. This regular expression does not validate all dates. For
    # example, February 31 is valid and nothing is known about leap years.
    # @return [String]
    attr_accessor :birth_date

    # The tax ID of the customer. The customer is also known as the payer. Both
    # `tax_id` and `tax_id_type` are required.
    # @return [TaxInfo]
    attr_accessor :tax_info

    # The portable international postal address. Maps to
    # [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/
    # wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls:
    # the autocomplete
    # attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-co
    # ntrols-the-autocomplete-attribute).
    # @return [Address]
    attr_accessor :address

    # Additional attributes associated with the use of this PayPal Wallet.
    # @return [PayPalWalletAttributes]
    attr_accessor :attributes

    # Customizes the payer experience during the approval process for payment
    # with PayPal.<blockquote><strong>Note:</strong> Partners and Marketplaces
    # might configure <code>brand_name</code> and
    # <code>shipping_preference</code> during partner account setup, which
    # overrides the request values.</blockquote>
    # @return [PayPalWalletExperienceContext]
    attr_accessor :experience_context

    # The PayPal billing agreement ID. References an approved recurring payment
    # for goods or services.
    # @return [String]
    attr_accessor :billing_agreement_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['vault_id'] = 'vault_id'
      @_hash['email_address'] = 'email_address'
      @_hash['name'] = 'name'
      @_hash['phone'] = 'phone'
      @_hash['birth_date'] = 'birth_date'
      @_hash['tax_info'] = 'tax_info'
      @_hash['address'] = 'address'
      @_hash['attributes'] = 'attributes'
      @_hash['experience_context'] = 'experience_context'
      @_hash['billing_agreement_id'] = 'billing_agreement_id'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        vault_id
        email_address
        name
        phone
        birth_date
        tax_info
        address
        attributes
        experience_context
        billing_agreement_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(vault_id = SKIP, email_address = SKIP, name = SKIP,
                   phone = SKIP, birth_date = SKIP, tax_info = SKIP,
                   address = SKIP, attributes = SKIP, experience_context = SKIP,
                   billing_agreement_id = SKIP)
      @vault_id = vault_id unless vault_id == SKIP
      @email_address = email_address unless email_address == SKIP
      @name = name unless name == SKIP
      @phone = phone unless phone == SKIP
      @birth_date = birth_date unless birth_date == SKIP
      @tax_info = tax_info unless tax_info == SKIP
      @address = address unless address == SKIP
      @attributes = attributes unless attributes == SKIP
      @experience_context = experience_context unless experience_context == SKIP
      @billing_agreement_id = billing_agreement_id unless billing_agreement_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      vault_id = hash.key?('vault_id') ? hash['vault_id'] : SKIP
      email_address = hash.key?('email_address') ? hash['email_address'] : SKIP
      name = Name.from_hash(hash['name']) if hash['name']
      phone = PhoneWithType.from_hash(hash['phone']) if hash['phone']
      birth_date = hash.key?('birth_date') ? hash['birth_date'] : SKIP
      tax_info = TaxInfo.from_hash(hash['tax_info']) if hash['tax_info']
      address = Address.from_hash(hash['address']) if hash['address']
      attributes = PayPalWalletAttributes.from_hash(hash['attributes']) if hash['attributes']
      experience_context = PayPalWalletExperienceContext.from_hash(hash['experience_context']) if
        hash['experience_context']
      billing_agreement_id =
        hash.key?('billing_agreement_id') ? hash['billing_agreement_id'] : SKIP

      # Create object from extracted values.
      PayPalWallet.new(vault_id,
                       email_address,
                       name,
                       phone,
                       birth_date,
                       tax_info,
                       address,
                       attributes,
                       experience_context,
                       billing_agreement_id)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} vault_id: #{@vault_id}, email_address: #{@email_address}, name: #{@name},"\
      " phone: #{@phone}, birth_date: #{@birth_date}, tax_info: #{@tax_info}, address:"\
      " #{@address}, attributes: #{@attributes}, experience_context: #{@experience_context},"\
      " billing_agreement_id: #{@billing_agreement_id}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} vault_id: #{@vault_id.inspect}, email_address: #{@email_address.inspect},"\
      " name: #{@name.inspect}, phone: #{@phone.inspect}, birth_date: #{@birth_date.inspect},"\
      " tax_info: #{@tax_info.inspect}, address: #{@address.inspect}, attributes:"\
      " #{@attributes.inspect}, experience_context: #{@experience_context.inspect},"\
      " billing_agreement_id: #{@billing_agreement_id.inspect}>"
    end
  end
end

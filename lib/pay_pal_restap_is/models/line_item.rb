# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The line items for this purchase. If your merchant account has been
  # configured for Level 3 processing this field will be passed to the processor
  # on your behalf.
  class LineItem < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The item name or title.
    # @return [String]
    attr_accessor :name

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :unit_amount

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :tax

    # The item quantity. Must be a whole number.
    # @return [String]
    attr_accessor :quantity

    # The detailed item description.
    # @return [String]
    attr_accessor :description

    # The stock keeping unit (SKU) for the item.
    # @return [String]
    attr_accessor :sku

    # The URL to the item being purchased. Visible to buyer and used in buyer
    # experiences.
    # @return [String]
    attr_accessor :url

    # The URL of the item's image. File type and size restrictions apply. An
    # image that violates these restrictions will not be honored.
    # @return [String]
    attr_accessor :image_url

    # The Universal Product Code of the item.
    # @return [UniversalProductCode]
    attr_accessor :upc

    # Code used to classify items purchased and track the total amount spent
    # across various categories of products and services. Different corporate
    # purchasing organizations may use different standards, but the United
    # Nations Standard Products and Services Code (UNSPSC) is frequently used.
    # @return [String]
    attr_accessor :commodity_code

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :discount_amount

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :total_amount

    # Unit of measure is a standard used to express the magnitude of a quantity
    # in international trade. Most commonly used (but not limited to) examples
    # are: Acre (ACR), Ampere (AMP), Centigram (CGM), Centimetre (CMT), Cubic
    # inch (INQ), Cubic metre (MTQ), Fluid ounce (OZA), Foot (FOT), Hour (HUR),
    # Item (ITM), Kilogram (KGM), Kilometre (KMT), Kilowatt (KWT), Liquid gallon
    # (GLL), Liter (LTR), Pounds (LBS), Square foot (FTK).
    # @return [String]
    attr_accessor :unit_of_measure

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['unit_amount'] = 'unit_amount'
      @_hash['tax'] = 'tax'
      @_hash['quantity'] = 'quantity'
      @_hash['description'] = 'description'
      @_hash['sku'] = 'sku'
      @_hash['url'] = 'url'
      @_hash['image_url'] = 'image_url'
      @_hash['upc'] = 'upc'
      @_hash['commodity_code'] = 'commodity_code'
      @_hash['discount_amount'] = 'discount_amount'
      @_hash['total_amount'] = 'total_amount'
      @_hash['unit_of_measure'] = 'unit_of_measure'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        tax
        description
        sku
        url
        image_url
        upc
        commodity_code
        discount_amount
        total_amount
        unit_of_measure
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = nil, unit_amount = nil, quantity = nil, tax = SKIP,
                   description = SKIP, sku = SKIP, url = SKIP, image_url = SKIP,
                   upc = SKIP, commodity_code = SKIP, discount_amount = SKIP,
                   total_amount = SKIP, unit_of_measure = SKIP)
      @name = name
      @unit_amount = unit_amount
      @tax = tax unless tax == SKIP
      @quantity = quantity
      @description = description unless description == SKIP
      @sku = sku unless sku == SKIP
      @url = url unless url == SKIP
      @image_url = image_url unless image_url == SKIP
      @upc = upc unless upc == SKIP
      @commodity_code = commodity_code unless commodity_code == SKIP
      @discount_amount = discount_amount unless discount_amount == SKIP
      @total_amount = total_amount unless total_amount == SKIP
      @unit_of_measure = unit_of_measure unless unit_of_measure == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : nil
      unit_amount = Money.from_hash(hash['unit_amount']) if hash['unit_amount']
      quantity = hash.key?('quantity') ? hash['quantity'] : nil
      tax = Money.from_hash(hash['tax']) if hash['tax']
      description = hash.key?('description') ? hash['description'] : SKIP
      sku = hash.key?('sku') ? hash['sku'] : SKIP
      url = hash.key?('url') ? hash['url'] : SKIP
      image_url = hash.key?('image_url') ? hash['image_url'] : SKIP
      upc = UniversalProductCode.from_hash(hash['upc']) if hash['upc']
      commodity_code =
        hash.key?('commodity_code') ? hash['commodity_code'] : SKIP
      discount_amount = Money.from_hash(hash['discount_amount']) if hash['discount_amount']
      total_amount = Money.from_hash(hash['total_amount']) if hash['total_amount']
      unit_of_measure =
        hash.key?('unit_of_measure') ? hash['unit_of_measure'] : SKIP

      # Create object from extracted values.
      LineItem.new(name,
                   unit_amount,
                   quantity,
                   tax,
                   description,
                   sku,
                   url,
                   image_url,
                   upc,
                   commodity_code,
                   discount_amount,
                   total_amount,
                   unit_of_measure)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name}, unit_amount: #{@unit_amount}, tax: #{@tax}, quantity:"\
      " #{@quantity}, description: #{@description}, sku: #{@sku}, url: #{@url}, image_url:"\
      " #{@image_url}, upc: #{@upc}, commodity_code: #{@commodity_code}, discount_amount:"\
      " #{@discount_amount}, total_amount: #{@total_amount}, unit_of_measure:"\
      " #{@unit_of_measure}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name.inspect}, unit_amount: #{@unit_amount.inspect}, tax:"\
      " #{@tax.inspect}, quantity: #{@quantity.inspect}, description: #{@description.inspect},"\
      " sku: #{@sku.inspect}, url: #{@url.inspect}, image_url: #{@image_url.inspect}, upc:"\
      " #{@upc.inspect}, commodity_code: #{@commodity_code.inspect}, discount_amount:"\
      " #{@discount_amount.inspect}, total_amount: #{@total_amount.inspect}, unit_of_measure:"\
      " #{@unit_of_measure.inspect}>"
    end
  end
end

# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Information about the decrypted apple pay payment data for the token like
  # cryptogram, eci indicator.
  class ApplePayPaymentData < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Online payment cryptogram, as defined by 3D Secure. The pattern is defined
    # by an external party and supports Unicode.
    # @return [String]
    attr_accessor :cryptogram

    # ECI indicator, as defined by 3- Secure. The pattern is defined by an
    # external party and supports Unicode.
    # @return [String]
    attr_accessor :eci_indicator

    # Encoded Apple Pay EMV Payment Structure used for payments in China. The
    # pattern is defined by an external party and supports Unicode.
    # @return [String]
    attr_accessor :emv_data

    # Bank Key encrypted Apple Pay PIN. The pattern is defined by an external
    # party and supports Unicode.
    # @return [String]
    attr_accessor :pin

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['cryptogram'] = 'cryptogram'
      @_hash['eci_indicator'] = 'eci_indicator'
      @_hash['emv_data'] = 'emv_data'
      @_hash['pin'] = 'pin'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        cryptogram
        eci_indicator
        emv_data
        pin
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(cryptogram = SKIP, eci_indicator = SKIP, emv_data = SKIP,
                   pin = SKIP)
      @cryptogram = cryptogram unless cryptogram == SKIP
      @eci_indicator = eci_indicator unless eci_indicator == SKIP
      @emv_data = emv_data unless emv_data == SKIP
      @pin = pin unless pin == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      cryptogram = hash.key?('cryptogram') ? hash['cryptogram'] : SKIP
      eci_indicator = hash.key?('eci_indicator') ? hash['eci_indicator'] : SKIP
      emv_data = hash.key?('emv_data') ? hash['emv_data'] : SKIP
      pin = hash.key?('pin') ? hash['pin'] : SKIP

      # Create object from extracted values.
      ApplePayPaymentData.new(cryptogram,
                              eci_indicator,
                              emv_data,
                              pin)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} cryptogram: #{@cryptogram}, eci_indicator: #{@eci_indicator}, emv_data:"\
      " #{@emv_data}, pin: #{@pin}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} cryptogram: #{@cryptogram.inspect}, eci_indicator:"\
      " #{@eci_indicator.inspect}, emv_data: #{@emv_data.inspect}, pin: #{@pin.inspect}>"
    end
  end
end

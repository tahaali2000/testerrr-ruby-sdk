# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Information used to pay using P24(Przelewy24).
  class P24PaymentObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The full name representation like Mr J Smith.
    # @return [String]
    attr_accessor :name

    # The internationalized email address.<blockquote><strong>Note:</strong> Up
    # to 64 characters are allowed before and 255 characters are allowed after
    # the <code>@</code> sign. However, the generally accepted maximum length
    # for an email address is 254 characters. The pattern verifies that an
    # unquoted <code>@</code> sign exists.</blockquote>
    # @return [String]
    attr_accessor :email

    # The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/)
    # that identifies the country or region.<blockquote><strong>Note:</strong>
    # The country code for Great Britain is <code>GB</code> and not
    # <code>UK</code> as used in the top-level domain names for that country.
    # Use the `C2` country code for China worldwide for comparable uncontrolled
    # price (CUP) method, bank card, and cross-border transactions.</blockquote>
    # @return [String]
    attr_accessor :country_code

    # P24 generated payment description.
    # @return [String]
    attr_accessor :payment_descriptor

    # Numeric identifier of the payment scheme or bank used for the payment.
    # @return [String]
    attr_accessor :method_id

    # Friendly name of the payment scheme or bank used for the payment.
    # @return [String]
    attr_accessor :method_description

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['email'] = 'email'
      @_hash['country_code'] = 'country_code'
      @_hash['payment_descriptor'] = 'payment_descriptor'
      @_hash['method_id'] = 'method_id'
      @_hash['method_description'] = 'method_description'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        name
        email
        country_code
        payment_descriptor
        method_id
        method_description
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = SKIP, email = SKIP, country_code = SKIP,
                   payment_descriptor = SKIP, method_id = SKIP,
                   method_description = SKIP)
      @name = name unless name == SKIP
      @email = email unless email == SKIP
      @country_code = country_code unless country_code == SKIP
      @payment_descriptor = payment_descriptor unless payment_descriptor == SKIP
      @method_id = method_id unless method_id == SKIP
      @method_description = method_description unless method_description == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : SKIP
      email = hash.key?('email') ? hash['email'] : SKIP
      country_code = hash.key?('country_code') ? hash['country_code'] : SKIP
      payment_descriptor =
        hash.key?('payment_descriptor') ? hash['payment_descriptor'] : SKIP
      method_id = hash.key?('method_id') ? hash['method_id'] : SKIP
      method_description =
        hash.key?('method_description') ? hash['method_description'] : SKIP

      # Create object from extracted values.
      P24PaymentObject.new(name,
                           email,
                           country_code,
                           payment_descriptor,
                           method_id,
                           method_description)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name}, email: #{@email}, country_code: #{@country_code},"\
      " payment_descriptor: #{@payment_descriptor}, method_id: #{@method_id}, method_description:"\
      " #{@method_description}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name.inspect}, email: #{@email.inspect}, country_code:"\
      " #{@country_code.inspect}, payment_descriptor: #{@payment_descriptor.inspect}, method_id:"\
      " #{@method_id.inspect}, method_description: #{@method_description.inspect}>"
    end
  end
end

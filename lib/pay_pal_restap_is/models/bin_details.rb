# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Bank Identification Number (BIN) details used to fund a payment.
  class BinDetails < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The Bank Identification Number (BIN) signifies the number that is being
    # used to identify the granular level details (except the PII information)
    # of the card.
    # @return [String]
    attr_accessor :bin

    # The issuer of the card instrument.
    # @return [String]
    attr_accessor :issuing_bank

    # The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/)
    # that identifies the country or region.<blockquote><strong>Note:</strong>
    # The country code for Great Britain is <code>GB</code> and not
    # <code>UK</code> as used in the top-level domain names for that country.
    # Use the `C2` country code for China worldwide for comparable uncontrolled
    # price (CUP) method, bank card, and cross-border transactions.</blockquote>
    # @return [String]
    attr_accessor :bin_country_code

    # The type of card product assigned to the BIN by the issuer. These values
    # are defined by the issuer and may change over time. Some examples include:
    # PREPAID_GIFT, CONSUMER, CORPORATE.
    # @return [Array[String]]
    attr_accessor :products

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['bin'] = 'bin'
      @_hash['issuing_bank'] = 'issuing_bank'
      @_hash['bin_country_code'] = 'bin_country_code'
      @_hash['products'] = 'products'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        bin
        issuing_bank
        bin_country_code
        products
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(bin = SKIP, issuing_bank = SKIP, bin_country_code = SKIP,
                   products = SKIP)
      @bin = bin unless bin == SKIP
      @issuing_bank = issuing_bank unless issuing_bank == SKIP
      @bin_country_code = bin_country_code unless bin_country_code == SKIP
      @products = products unless products == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      bin = hash.key?('bin') ? hash['bin'] : SKIP
      issuing_bank = hash.key?('issuing_bank') ? hash['issuing_bank'] : SKIP
      bin_country_code =
        hash.key?('bin_country_code') ? hash['bin_country_code'] : SKIP
      products = hash.key?('products') ? hash['products'] : SKIP

      # Create object from extracted values.
      BinDetails.new(bin,
                     issuing_bank,
                     bin_country_code,
                     products)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} bin: #{@bin}, issuing_bank: #{@issuing_bank}, bin_country_code:"\
      " #{@bin_country_code}, products: #{@products}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} bin: #{@bin.inspect}, issuing_bank: #{@issuing_bank.inspect},"\
      " bin_country_code: #{@bin_country_code.inspect}, products: #{@products.inspect}>"
    end
  end
end

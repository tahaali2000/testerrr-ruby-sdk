# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The date and time stamps that are common to authorized payment, captured
  # payment, and refund transactions.
  class ActivityTimestamps < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The date and time, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are
    # required while fractional seconds are
    # optional.<blockquote><strong>Note:</strong> The regular expression
    # provides guidance but does not reject all invalid dates.</blockquote>
    # @return [String]
    attr_accessor :create_time

    # The date and time, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are
    # required while fractional seconds are
    # optional.<blockquote><strong>Note:</strong> The regular expression
    # provides guidance but does not reject all invalid dates.</blockquote>
    # @return [String]
    attr_accessor :update_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['create_time'] = 'create_time'
      @_hash['update_time'] = 'update_time'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        create_time
        update_time
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(create_time = SKIP, update_time = SKIP)
      @create_time = create_time unless create_time == SKIP
      @update_time = update_time unless update_time == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      create_time = hash.key?('create_time') ? hash['create_time'] : SKIP
      update_time = hash.key?('update_time') ? hash['update_time'] : SKIP

      # Create object from extracted values.
      ActivityTimestamps.new(create_time,
                             update_time)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} create_time: #{@create_time}, update_time: #{@update_time}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} create_time: #{@create_time.inspect}, update_time:"\
      " #{@update_time.inspect}>"
    end
  end
end

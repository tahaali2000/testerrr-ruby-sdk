# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The authorized payment transaction.
  class PaymentAuthorization < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The status for the authorized payment.
    # @return [AuthorizationStatus]
    attr_accessor :status

    # The details of the authorized payment status.
    # @return [AuthorizationStatusDetails]
    attr_accessor :status_details

    # The PayPal-generated ID for the authorized payment.
    # @return [String]
    attr_accessor :id

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :amount

    # The API caller-provided external invoice number for this order. Appears in
    # both the payer's transaction history and the emails that the payer
    # receives.
    # @return [String]
    attr_accessor :invoice_id

    # The API caller-provided external ID. Used to reconcile API
    # caller-initiated transactions with PayPal transactions. Appears in
    # transaction and settlement reports.
    # @return [String]
    attr_accessor :custom_id

    # Reference values used by the card network to identify a transaction.
    # @return [NetworkTransactionReference]
    attr_accessor :network_transaction_reference

    # The level of protection offered as defined by [PayPal Seller Protection
    # for
    # Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protectio
    # n).
    # @return [SellerProtection]
    attr_accessor :seller_protection

    # The date and time, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are
    # required while fractional seconds are
    # optional.<blockquote><strong>Note:</strong> The regular expression
    # provides guidance but does not reject all invalid dates.</blockquote>
    # @return [String]
    attr_accessor :expiration_time

    # An array of related [HATEOAS
    # links](/docs/api/reference/api-responses/#hateoas-links).
    # @return [Array[LinkDescription]]
    attr_accessor :links

    # The date and time, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are
    # required while fractional seconds are
    # optional.<blockquote><strong>Note:</strong> The regular expression
    # provides guidance but does not reject all invalid dates.</blockquote>
    # @return [String]
    attr_accessor :create_time

    # The date and time, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are
    # required while fractional seconds are
    # optional.<blockquote><strong>Note:</strong> The regular expression
    # provides guidance but does not reject all invalid dates.</blockquote>
    # @return [String]
    attr_accessor :update_time

    # The supplementary data.
    # @return [PaymentSupplementaryData]
    attr_accessor :supplementary_data

    # The details for the merchant who receives the funds and fulfills the
    # order. The merchant is also known as the payee.
    # @return [Payee]
    attr_accessor :payee

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['status'] = 'status'
      @_hash['status_details'] = 'status_details'
      @_hash['id'] = 'id'
      @_hash['amount'] = 'amount'
      @_hash['invoice_id'] = 'invoice_id'
      @_hash['custom_id'] = 'custom_id'
      @_hash['network_transaction_reference'] =
        'network_transaction_reference'
      @_hash['seller_protection'] = 'seller_protection'
      @_hash['expiration_time'] = 'expiration_time'
      @_hash['links'] = 'links'
      @_hash['create_time'] = 'create_time'
      @_hash['update_time'] = 'update_time'
      @_hash['supplementary_data'] = 'supplementary_data'
      @_hash['payee'] = 'payee'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        status
        status_details
        id
        amount
        invoice_id
        custom_id
        network_transaction_reference
        seller_protection
        expiration_time
        links
        create_time
        update_time
        supplementary_data
        payee
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(status = SKIP, status_details = SKIP, id = SKIP,
                   amount = SKIP, invoice_id = SKIP, custom_id = SKIP,
                   network_transaction_reference = SKIP,
                   seller_protection = SKIP, expiration_time = SKIP,
                   links = SKIP, create_time = SKIP, update_time = SKIP,
                   supplementary_data = SKIP, payee = SKIP)
      @status = status unless status == SKIP
      @status_details = status_details unless status_details == SKIP
      @id = id unless id == SKIP
      @amount = amount unless amount == SKIP
      @invoice_id = invoice_id unless invoice_id == SKIP
      @custom_id = custom_id unless custom_id == SKIP
      unless network_transaction_reference == SKIP
        @network_transaction_reference =
          network_transaction_reference
      end
      @seller_protection = seller_protection unless seller_protection == SKIP
      @expiration_time = expiration_time unless expiration_time == SKIP
      @links = links unless links == SKIP
      @create_time = create_time unless create_time == SKIP
      @update_time = update_time unless update_time == SKIP
      @supplementary_data = supplementary_data unless supplementary_data == SKIP
      @payee = payee unless payee == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      status = hash.key?('status') ? hash['status'] : SKIP
      status_details = AuthorizationStatusDetails.from_hash(hash['status_details']) if
        hash['status_details']
      id = hash.key?('id') ? hash['id'] : SKIP
      amount = Money.from_hash(hash['amount']) if hash['amount']
      invoice_id = hash.key?('invoice_id') ? hash['invoice_id'] : SKIP
      custom_id = hash.key?('custom_id') ? hash['custom_id'] : SKIP
      if hash['network_transaction_reference']
        network_transaction_reference = NetworkTransactionReference.from_hash(hash['network_transaction_reference'])
      end
      seller_protection = SellerProtection.from_hash(hash['seller_protection']) if
        hash['seller_protection']
      expiration_time =
        hash.key?('expiration_time') ? hash['expiration_time'] : SKIP
      # Parameter is an array, so we need to iterate through it
      links = nil
      unless hash['links'].nil?
        links = []
        hash['links'].each do |structure|
          links << (LinkDescription.from_hash(structure) if structure)
        end
      end

      links = SKIP unless hash.key?('links')
      create_time = hash.key?('create_time') ? hash['create_time'] : SKIP
      update_time = hash.key?('update_time') ? hash['update_time'] : SKIP
      supplementary_data = PaymentSupplementaryData.from_hash(hash['supplementary_data']) if
        hash['supplementary_data']
      payee = Payee.from_hash(hash['payee']) if hash['payee']

      # Create object from extracted values.
      PaymentAuthorization.new(status,
                               status_details,
                               id,
                               amount,
                               invoice_id,
                               custom_id,
                               network_transaction_reference,
                               seller_protection,
                               expiration_time,
                               links,
                               create_time,
                               update_time,
                               supplementary_data,
                               payee)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} status: #{@status}, status_details: #{@status_details}, id: #{@id}, amount:"\
      " #{@amount}, invoice_id: #{@invoice_id}, custom_id: #{@custom_id},"\
      " network_transaction_reference: #{@network_transaction_reference}, seller_protection:"\
      " #{@seller_protection}, expiration_time: #{@expiration_time}, links: #{@links},"\
      " create_time: #{@create_time}, update_time: #{@update_time}, supplementary_data:"\
      " #{@supplementary_data}, payee: #{@payee}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} status: #{@status.inspect}, status_details: #{@status_details.inspect}, id:"\
      " #{@id.inspect}, amount: #{@amount.inspect}, invoice_id: #{@invoice_id.inspect}, custom_id:"\
      " #{@custom_id.inspect}, network_transaction_reference:"\
      " #{@network_transaction_reference.inspect}, seller_protection:"\
      " #{@seller_protection.inspect}, expiration_time: #{@expiration_time.inspect}, links:"\
      " #{@links.inspect}, create_time: #{@create_time.inspect}, update_time:"\
      " #{@update_time.inspect}, supplementary_data: #{@supplementary_data.inspect}, payee:"\
      " #{@payee.inspect}>"
    end
  end
end

# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The level of protection offered as defined by [PayPal Seller Protection for
  # Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection)
  # .
  class SellerProtection < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Indicates whether the transaction is eligible for seller protection. For
    # information, see [PayPal Seller Protection for
    # Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protectio
    # n).
    # @return [SellerProtectionStatus]
    attr_accessor :status

    # An array of conditions that are covered for the transaction.
    # @return [Array[DisputeCategory]]
    attr_accessor :dispute_categories

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['status'] = 'status'
      @_hash['dispute_categories'] = 'dispute_categories'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        status
        dispute_categories
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(status = SKIP, dispute_categories = SKIP)
      @status = status unless status == SKIP
      @dispute_categories = dispute_categories unless dispute_categories == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      status = hash.key?('status') ? hash['status'] : SKIP
      dispute_categories =
        hash.key?('dispute_categories') ? hash['dispute_categories'] : SKIP

      # Create object from extracted values.
      SellerProtection.new(status,
                           dispute_categories)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} status: #{@status}, dispute_categories: #{@dispute_categories}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} status: #{@status.inspect}, dispute_categories:"\
      " #{@dispute_categories.inspect}>"
    end
  end
end

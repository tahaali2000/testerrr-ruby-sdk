# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The tracking response on creation of tracker.
  class OrderTrackerResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The tracker id.
    # @return [String]
    attr_accessor :id

    # The status of the item shipment.
    # @return [OrderTrackerStatus]
    attr_accessor :status

    # An array of details of items in the shipment.
    # @return [Array[OrderTrackerItem]]
    attr_accessor :items

    # An array of request-related HATEOAS links.
    # @return [Array[LinkDescription]]
    attr_accessor :links

    # The date and time, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are
    # required while fractional seconds are
    # optional.<blockquote><strong>Note:</strong> The regular expression
    # provides guidance but does not reject all invalid dates.</blockquote>
    # @return [String]
    attr_accessor :create_time

    # The date and time, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are
    # required while fractional seconds are
    # optional.<blockquote><strong>Note:</strong> The regular expression
    # provides guidance but does not reject all invalid dates.</blockquote>
    # @return [String]
    attr_accessor :update_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['status'] = 'status'
      @_hash['items'] = 'items'
      @_hash['links'] = 'links'
      @_hash['create_time'] = 'create_time'
      @_hash['update_time'] = 'update_time'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        status
        items
        links
        create_time
        update_time
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, status = SKIP, items = SKIP, links = SKIP,
                   create_time = SKIP, update_time = SKIP)
      @id = id unless id == SKIP
      @status = status unless status == SKIP
      @items = items unless items == SKIP
      @links = links unless links == SKIP
      @create_time = create_time unless create_time == SKIP
      @update_time = update_time unless update_time == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      # Parameter is an array, so we need to iterate through it
      items = nil
      unless hash['items'].nil?
        items = []
        hash['items'].each do |structure|
          items << (OrderTrackerItem.from_hash(structure) if structure)
        end
      end

      items = SKIP unless hash.key?('items')
      # Parameter is an array, so we need to iterate through it
      links = nil
      unless hash['links'].nil?
        links = []
        hash['links'].each do |structure|
          links << (LinkDescription.from_hash(structure) if structure)
        end
      end

      links = SKIP unless hash.key?('links')
      create_time = hash.key?('create_time') ? hash['create_time'] : SKIP
      update_time = hash.key?('update_time') ? hash['update_time'] : SKIP

      # Create object from extracted values.
      OrderTrackerResponse.new(id,
                               status,
                               items,
                               links,
                               create_time,
                               update_time)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, status: #{@status}, items: #{@items}, links: #{@links},"\
      " create_time: #{@create_time}, update_time: #{@update_time}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, status: #{@status.inspect}, items: #{@items.inspect},"\
      " links: #{@links.inspect}, create_time: #{@create_time.inspect}, update_time:"\
      " #{@update_time.inspect}>"
    end
  end
end

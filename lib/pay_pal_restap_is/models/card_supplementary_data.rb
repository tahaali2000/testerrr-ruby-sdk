# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Merchants and partners can add Level 2 and 3 data to payments to reduce risk
  # and payment processing costs. For more information about processing
  # payments, see <a
  # href="https://developer.paypal.com/docs/checkout/advanced/processing/">check
  # out</a> or <a
  # href="https://developer.paypal.com/docs/multiparty/checkout/advanced/process
  # ing/">multiparty checkout</a>.
  class CardSupplementaryData < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The level 2 card processing data collections. If your merchant account has
    # been configured for Level 2 processing this field will be passed to the
    # processor on your behalf. Please contact your PayPal Technical Account
    # Manager to define level 2 data for your business.
    # @return [Level2CardProcessingData]
    attr_accessor :level_2

    # The level 3 card processing data collections, If your merchant account has
    # been configured for Level 3 processing this field will be passed to the
    # processor on your behalf. Please contact your PayPal Technical Account
    # Manager to define level 3 data for your business.
    # @return [Level3CardProcessingData]
    attr_accessor :level_3

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['level_2'] = 'level_2'
      @_hash['level_3'] = 'level_3'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        level_2
        level_3
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(level_2 = SKIP, level_3 = SKIP)
      @level_2 = level_2 unless level_2 == SKIP
      @level_3 = level_3 unless level_3 == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      level_2 = Level2CardProcessingData.from_hash(hash['level_2']) if hash['level_2']
      level_3 = Level3CardProcessingData.from_hash(hash['level_3']) if hash['level_3']

      # Create object from extracted values.
      CardSupplementaryData.new(level_2,
                                level_3)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} level_2: #{@level_2}, level_3: #{@level_3}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} level_2: #{@level_2.inspect}, level_3: #{@level_3.inspect}>"
    end
  end
end

# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The detailed breakdown of the capture activity. This is not available for
  # transactions that are in pending state.
  class SellerReceivableBreakdown < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :gross_amount

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :paypal_fee

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :paypal_fee_in_receivable_currency

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :net_amount

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :receivable_amount

    # The exchange rate that determines the amount to convert from one currency
    # to another currency.
    # @return [ExchangeRate]
    attr_accessor :exchange_rate

    # An array of platform or partner fees, commissions, or brokerage fees that
    # associated with the captured payment.
    # @return [Array[PlatformFee]]
    attr_accessor :platform_fees

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['gross_amount'] = 'gross_amount'
      @_hash['paypal_fee'] = 'paypal_fee'
      @_hash['paypal_fee_in_receivable_currency'] =
        'paypal_fee_in_receivable_currency'
      @_hash['net_amount'] = 'net_amount'
      @_hash['receivable_amount'] = 'receivable_amount'
      @_hash['exchange_rate'] = 'exchange_rate'
      @_hash['platform_fees'] = 'platform_fees'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        paypal_fee
        paypal_fee_in_receivable_currency
        net_amount
        receivable_amount
        exchange_rate
        platform_fees
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(gross_amount = nil, paypal_fee = SKIP,
                   paypal_fee_in_receivable_currency = SKIP, net_amount = SKIP,
                   receivable_amount = SKIP, exchange_rate = SKIP,
                   platform_fees = SKIP)
      @gross_amount = gross_amount
      @paypal_fee = paypal_fee unless paypal_fee == SKIP
      unless paypal_fee_in_receivable_currency == SKIP
        @paypal_fee_in_receivable_currency =
          paypal_fee_in_receivable_currency
      end
      @net_amount = net_amount unless net_amount == SKIP
      @receivable_amount = receivable_amount unless receivable_amount == SKIP
      @exchange_rate = exchange_rate unless exchange_rate == SKIP
      @platform_fees = platform_fees unless platform_fees == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      gross_amount = Money.from_hash(hash['gross_amount']) if hash['gross_amount']
      paypal_fee = Money.from_hash(hash['paypal_fee']) if hash['paypal_fee']
      if hash['paypal_fee_in_receivable_currency']
        paypal_fee_in_receivable_currency = Money.from_hash(hash['paypal_fee_in_receivable_currency'])
      end
      net_amount = Money.from_hash(hash['net_amount']) if hash['net_amount']
      receivable_amount = Money.from_hash(hash['receivable_amount']) if hash['receivable_amount']
      exchange_rate = ExchangeRate.from_hash(hash['exchange_rate']) if hash['exchange_rate']
      # Parameter is an array, so we need to iterate through it
      platform_fees = nil
      unless hash['platform_fees'].nil?
        platform_fees = []
        hash['platform_fees'].each do |structure|
          platform_fees << (PlatformFee.from_hash(structure) if structure)
        end
      end

      platform_fees = SKIP unless hash.key?('platform_fees')

      # Create object from extracted values.
      SellerReceivableBreakdown.new(gross_amount,
                                    paypal_fee,
                                    paypal_fee_in_receivable_currency,
                                    net_amount,
                                    receivable_amount,
                                    exchange_rate,
                                    platform_fees)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} gross_amount: #{@gross_amount}, paypal_fee: #{@paypal_fee},"\
      " paypal_fee_in_receivable_currency: #{@paypal_fee_in_receivable_currency}, net_amount:"\
      " #{@net_amount}, receivable_amount: #{@receivable_amount}, exchange_rate:"\
      " #{@exchange_rate}, platform_fees: #{@platform_fees}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} gross_amount: #{@gross_amount.inspect}, paypal_fee: #{@paypal_fee.inspect},"\
      " paypal_fee_in_receivable_currency: #{@paypal_fee_in_receivable_currency.inspect},"\
      " net_amount: #{@net_amount.inspect}, receivable_amount: #{@receivable_amount.inspect},"\
      " exchange_rate: #{@exchange_rate.inspect}, platform_fees: #{@platform_fees.inspect}>"
    end
  end
end

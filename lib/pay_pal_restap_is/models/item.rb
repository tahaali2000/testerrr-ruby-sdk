# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The details for the items to be purchased.
  class Item < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The item name or title.
    # @return [String]
    attr_accessor :name

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :unit_amount

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :tax

    # The item quantity. Must be a whole number.
    # @return [String]
    attr_accessor :quantity

    # The detailed item description.
    # @return [String]
    attr_accessor :description

    # The stock keeping unit (SKU) for the item.
    # @return [String]
    attr_accessor :sku

    # The URL to the item being purchased. Visible to buyer and used in buyer
    # experiences.
    # @return [String]
    attr_accessor :url

    # The item category type.
    # @return [ItemCategory]
    attr_accessor :category

    # The URL of the item's image. File type and size restrictions apply. An
    # image that violates these restrictions will not be honored.
    # @return [String]
    attr_accessor :image_url

    # The Universal Product Code of the item.
    # @return [UniversalProductCode]
    attr_accessor :upc

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['unit_amount'] = 'unit_amount'
      @_hash['tax'] = 'tax'
      @_hash['quantity'] = 'quantity'
      @_hash['description'] = 'description'
      @_hash['sku'] = 'sku'
      @_hash['url'] = 'url'
      @_hash['category'] = 'category'
      @_hash['image_url'] = 'image_url'
      @_hash['upc'] = 'upc'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        tax
        description
        sku
        url
        category
        image_url
        upc
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = nil, unit_amount = nil, quantity = nil, tax = SKIP,
                   description = SKIP, sku = SKIP, url = SKIP, category = SKIP,
                   image_url = SKIP, upc = SKIP)
      @name = name
      @unit_amount = unit_amount
      @tax = tax unless tax == SKIP
      @quantity = quantity
      @description = description unless description == SKIP
      @sku = sku unless sku == SKIP
      @url = url unless url == SKIP
      @category = category unless category == SKIP
      @image_url = image_url unless image_url == SKIP
      @upc = upc unless upc == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : nil
      unit_amount = Money.from_hash(hash['unit_amount']) if hash['unit_amount']
      quantity = hash.key?('quantity') ? hash['quantity'] : nil
      tax = Money.from_hash(hash['tax']) if hash['tax']
      description = hash.key?('description') ? hash['description'] : SKIP
      sku = hash.key?('sku') ? hash['sku'] : SKIP
      url = hash.key?('url') ? hash['url'] : SKIP
      category = hash.key?('category') ? hash['category'] : SKIP
      image_url = hash.key?('image_url') ? hash['image_url'] : SKIP
      upc = UniversalProductCode.from_hash(hash['upc']) if hash['upc']

      # Create object from extracted values.
      Item.new(name,
               unit_amount,
               quantity,
               tax,
               description,
               sku,
               url,
               category,
               image_url,
               upc)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name}, unit_amount: #{@unit_amount}, tax: #{@tax}, quantity:"\
      " #{@quantity}, description: #{@description}, sku: #{@sku}, url: #{@url}, category:"\
      " #{@category}, image_url: #{@image_url}, upc: #{@upc}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name.inspect}, unit_amount: #{@unit_amount.inspect}, tax:"\
      " #{@tax.inspect}, quantity: #{@quantity.inspect}, description: #{@description.inspect},"\
      " sku: #{@sku.inspect}, url: #{@url.inspect}, category: #{@category.inspect}, image_url:"\
      " #{@image_url.inspect}, upc: #{@upc.inspect}>"
    end
  end
end

# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Information needed to pay using ApplePay.
  class ApplePayPaymentObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # ApplePay transaction identifier, this will be the unique identifier for
    # this transaction provided by Apple. The pattern is defined by an external
    # party and supports Unicode.
    # @return [String]
    attr_accessor :id

    # Encrypted ApplePay token, containing card information. This token would be
    # base64encoded. The pattern is defined by an external party and supports
    # Unicode.
    # @return [String]
    attr_accessor :token

    # The full name representation like Mr J Smith.
    # @return [String]
    attr_accessor :name

    # The internationalized email address.<blockquote><strong>Note:</strong> Up
    # to 64 characters are allowed before and 255 characters are allowed after
    # the <code>@</code> sign. However, the generally accepted maximum length
    # for an email address is 254 characters. The pattern verifies that an
    # unquoted <code>@</code> sign exists.</blockquote>
    # @return [String]
    attr_accessor :email_address

    # The phone number in its canonical international [E.164 numbering plan
    # format](https://www.itu.int/rec/T-REC-E.164/en).
    # @return [PhoneNumber]
    attr_accessor :phone_number

    # The Card from Apple Pay Wallet used to fund the payment.
    # @return [ApplePayCardResponse]
    attr_accessor :card

    # Additional attributes associated with the use of Apple Pay.
    # @return [ApplePayAttributesResponse]
    attr_accessor :attributes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['token'] = 'token'
      @_hash['name'] = 'name'
      @_hash['email_address'] = 'email_address'
      @_hash['phone_number'] = 'phone_number'
      @_hash['card'] = 'card'
      @_hash['attributes'] = 'attributes'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        token
        name
        email_address
        phone_number
        card
        attributes
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, token = SKIP, name = SKIP, email_address = SKIP,
                   phone_number = SKIP, card = SKIP, attributes = SKIP)
      @id = id unless id == SKIP
      @token = token unless token == SKIP
      @name = name unless name == SKIP
      @email_address = email_address unless email_address == SKIP
      @phone_number = phone_number unless phone_number == SKIP
      @card = card unless card == SKIP
      @attributes = attributes unless attributes == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      token = hash.key?('token') ? hash['token'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      email_address = hash.key?('email_address') ? hash['email_address'] : SKIP
      phone_number = PhoneNumber.from_hash(hash['phone_number']) if hash['phone_number']
      card = ApplePayCardResponse.from_hash(hash['card']) if hash['card']
      attributes = ApplePayAttributesResponse.from_hash(hash['attributes']) if hash['attributes']

      # Create object from extracted values.
      ApplePayPaymentObject.new(id,
                                token,
                                name,
                                email_address,
                                phone_number,
                                card,
                                attributes)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, token: #{@token}, name: #{@name}, email_address:"\
      " #{@email_address}, phone_number: #{@phone_number}, card: #{@card}, attributes:"\
      " #{@attributes}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, token: #{@token.inspect}, name: #{@name.inspect},"\
      " email_address: #{@email_address.inspect}, phone_number: #{@phone_number.inspect}, card:"\
      " #{@card.inspect}, attributes: #{@attributes.inspect}>"
    end
  end
end

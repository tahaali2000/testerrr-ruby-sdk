# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The PayPal Wallet response.
  class PayPalWalletResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The internationalized email address.<blockquote><strong>Note:</strong> Up
    # to 64 characters are allowed before and 255 characters are allowed after
    # the <code>@</code> sign. However, the generally accepted maximum length
    # for an email address is 254 characters. The pattern verifies that an
    # unquoted <code>@</code> sign exists.</blockquote>
    # @return [String]
    attr_accessor :email_address

    # The PayPal payer ID, which is a masked version of the PayPal account
    # number intended for use with third parties. The account number is
    # reversibly encrypted and a proprietary variant of Base32 is used to encode
    # the result.
    # @return [String]
    attr_accessor :account_id

    # The account status indicates whether the buyer has verified the financial
    # details associated with their PayPal account.
    # @return [PayPalWalletAccountVerificationStatus]
    attr_accessor :account_status

    # The name of the party.
    # @return [Name]
    attr_accessor :name

    # The phone type.
    # @return [PhoneType]
    attr_accessor :phone_type

    # The phone number in its canonical international [E.164 numbering plan
    # format](https://www.itu.int/rec/T-REC-E.164/en).
    # @return [PhoneNumber]
    attr_accessor :phone_number

    # The stand-alone date, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent
    # special legal values, such as a date of birth, you should use dates with
    # no associated time or time-zone data. Whenever possible, use the standard
    # `date_time` type. This regular expression does not validate all dates. For
    # example, February 31 is valid and nothing is known about leap years.
    # @return [String]
    attr_accessor :birth_date

    # The tax ID of the customer. The customer is also known as the payer. Both
    # `tax_id` and `tax_id_type` are required.
    # @return [TaxInfo]
    attr_accessor :tax_info

    # The portable international postal address. Maps to
    # [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/
    # wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls:
    # the autocomplete
    # attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-co
    # ntrols-the-autocomplete-attribute).
    # @return [Address]
    attr_accessor :address

    # Additional attributes associated with the use of a PayPal Wallet.
    # @return [PayPalWalletAttributesResponse]
    attr_accessor :attributes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['email_address'] = 'email_address'
      @_hash['account_id'] = 'account_id'
      @_hash['account_status'] = 'account_status'
      @_hash['name'] = 'name'
      @_hash['phone_type'] = 'phone_type'
      @_hash['phone_number'] = 'phone_number'
      @_hash['birth_date'] = 'birth_date'
      @_hash['tax_info'] = 'tax_info'
      @_hash['address'] = 'address'
      @_hash['attributes'] = 'attributes'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        email_address
        account_id
        account_status
        name
        phone_type
        phone_number
        birth_date
        tax_info
        address
        attributes
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(email_address = SKIP, account_id = SKIP,
                   account_status = SKIP, name = SKIP, phone_type = SKIP,
                   phone_number = SKIP, birth_date = SKIP, tax_info = SKIP,
                   address = SKIP, attributes = SKIP)
      @email_address = email_address unless email_address == SKIP
      @account_id = account_id unless account_id == SKIP
      @account_status = account_status unless account_status == SKIP
      @name = name unless name == SKIP
      @phone_type = phone_type unless phone_type == SKIP
      @phone_number = phone_number unless phone_number == SKIP
      @birth_date = birth_date unless birth_date == SKIP
      @tax_info = tax_info unless tax_info == SKIP
      @address = address unless address == SKIP
      @attributes = attributes unless attributes == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      email_address = hash.key?('email_address') ? hash['email_address'] : SKIP
      account_id = hash.key?('account_id') ? hash['account_id'] : SKIP
      account_status =
        hash.key?('account_status') ? hash['account_status'] : SKIP
      name = Name.from_hash(hash['name']) if hash['name']
      phone_type = hash.key?('phone_type') ? hash['phone_type'] : SKIP
      phone_number = PhoneNumber.from_hash(hash['phone_number']) if hash['phone_number']
      birth_date = hash.key?('birth_date') ? hash['birth_date'] : SKIP
      tax_info = TaxInfo.from_hash(hash['tax_info']) if hash['tax_info']
      address = Address.from_hash(hash['address']) if hash['address']
      attributes = PayPalWalletAttributesResponse.from_hash(hash['attributes']) if
        hash['attributes']

      # Create object from extracted values.
      PayPalWalletResponse.new(email_address,
                               account_id,
                               account_status,
                               name,
                               phone_type,
                               phone_number,
                               birth_date,
                               tax_info,
                               address,
                               attributes)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} email_address: #{@email_address}, account_id: #{@account_id},"\
      " account_status: #{@account_status}, name: #{@name}, phone_type: #{@phone_type},"\
      " phone_number: #{@phone_number}, birth_date: #{@birth_date}, tax_info: #{@tax_info},"\
      " address: #{@address}, attributes: #{@attributes}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} email_address: #{@email_address.inspect}, account_id:"\
      " #{@account_id.inspect}, account_status: #{@account_status.inspect}, name:"\
      " #{@name.inspect}, phone_type: #{@phone_type.inspect}, phone_number:"\
      " #{@phone_number.inspect}, birth_date: #{@birth_date.inspect}, tax_info:"\
      " #{@tax_info.inspect}, address: #{@address.inspect}, attributes: #{@attributes.inspect}>"
    end
  end
end

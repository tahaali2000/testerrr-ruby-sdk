# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The order details.
  class Order < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The date and time, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are
    # required while fractional seconds are
    # optional.<blockquote><strong>Note:</strong> The regular expression
    # provides guidance but does not reject all invalid dates.</blockquote>
    # @return [String]
    attr_accessor :create_time

    # The date and time, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are
    # required while fractional seconds are
    # optional.<blockquote><strong>Note:</strong> The regular expression
    # provides guidance but does not reject all invalid dates.</blockquote>
    # @return [String]
    attr_accessor :update_time

    # The ID of the order.
    # @return [String]
    attr_accessor :id

    # The payment source used to fund the payment.
    # @return [PaymentSourceResponse]
    attr_accessor :payment_source

    # The intent to either capture payment immediately or authorize a payment
    # for an order after order creation.
    # @return [CheckoutPaymentIntent]
    attr_accessor :intent

    # The instruction to process an order.
    # @return [ProcessingInstruction]
    attr_accessor :processing_instruction

    # The instruction to process an order.
    # @return [Payer]
    attr_accessor :payer

    # An array of purchase units. Each purchase unit establishes a contract
    # between a customer and merchant. Each purchase unit represents either a
    # full or partial order that the customer intends to purchase from the
    # merchant.
    # @return [Array[PurchaseUnit]]
    attr_accessor :purchase_units

    # The order status.
    # @return [OrderStatus]
    attr_accessor :status

    # An array of request-related HATEOAS links. To complete payer approval, use
    # the `approve` link to redirect the payer. The API caller has 3 hours
    # (default setting, this which can be changed by your account manager to
    # 24/48/72 hours to accommodate your use case) from the time the order is
    # created, to redirect your payer. Once redirected, the API caller has 3
    # hours for the payer to approve the order and either authorize or capture
    # the order. If you are not using the PayPal JavaScript SDK to initiate
    # PayPal Checkout (in context) ensure that you include
    # `application_context.return_url` is specified or you will get "We're
    # sorry, Things don't appear to be working at the moment" after the payer
    # approves the payment.
    # @return [Array[LinkDescription]]
    attr_accessor :links

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['create_time'] = 'create_time'
      @_hash['update_time'] = 'update_time'
      @_hash['id'] = 'id'
      @_hash['payment_source'] = 'payment_source'
      @_hash['intent'] = 'intent'
      @_hash['processing_instruction'] = 'processing_instruction'
      @_hash['payer'] = 'payer'
      @_hash['purchase_units'] = 'purchase_units'
      @_hash['status'] = 'status'
      @_hash['links'] = 'links'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        create_time
        update_time
        id
        payment_source
        intent
        processing_instruction
        payer
        purchase_units
        status
        links
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(
      create_time = SKIP, update_time = SKIP, id = SKIP, payment_source = SKIP,
      intent = SKIP,
      processing_instruction = ProcessingInstruction::NO_INSTRUCTION,
      payer = SKIP, purchase_units = SKIP, status = SKIP, links = SKIP
    )
      @create_time = create_time unless create_time == SKIP
      @update_time = update_time unless update_time == SKIP
      @id = id unless id == SKIP
      @payment_source = payment_source unless payment_source == SKIP
      @intent = intent unless intent == SKIP
      @processing_instruction = processing_instruction unless processing_instruction == SKIP
      @payer = payer unless payer == SKIP
      @purchase_units = purchase_units unless purchase_units == SKIP
      @status = status unless status == SKIP
      @links = links unless links == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      create_time = hash.key?('create_time') ? hash['create_time'] : SKIP
      update_time = hash.key?('update_time') ? hash['update_time'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      payment_source = PaymentSourceResponse.from_hash(hash['payment_source']) if
        hash['payment_source']
      intent = hash.key?('intent') ? hash['intent'] : SKIP
      processing_instruction =
        hash['processing_instruction'] ||= ProcessingInstruction::NO_INSTRUCTION
      payer = Payer.from_hash(hash['payer']) if hash['payer']
      # Parameter is an array, so we need to iterate through it
      purchase_units = nil
      unless hash['purchase_units'].nil?
        purchase_units = []
        hash['purchase_units'].each do |structure|
          purchase_units << (PurchaseUnit.from_hash(structure) if structure)
        end
      end

      purchase_units = SKIP unless hash.key?('purchase_units')
      status = hash.key?('status') ? hash['status'] : SKIP
      # Parameter is an array, so we need to iterate through it
      links = nil
      unless hash['links'].nil?
        links = []
        hash['links'].each do |structure|
          links << (LinkDescription.from_hash(structure) if structure)
        end
      end

      links = SKIP unless hash.key?('links')

      # Create object from extracted values.
      Order.new(create_time,
                update_time,
                id,
                payment_source,
                intent,
                processing_instruction,
                payer,
                purchase_units,
                status,
                links)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} create_time: #{@create_time}, update_time: #{@update_time}, id: #{@id},"\
      " payment_source: #{@payment_source}, intent: #{@intent}, processing_instruction:"\
      " #{@processing_instruction}, payer: #{@payer}, purchase_units: #{@purchase_units}, status:"\
      " #{@status}, links: #{@links}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} create_time: #{@create_time.inspect}, update_time: #{@update_time.inspect},"\
      " id: #{@id.inspect}, payment_source: #{@payment_source.inspect}, intent:"\
      " #{@intent.inspect}, processing_instruction: #{@processing_instruction.inspect}, payer:"\
      " #{@payer.inspect}, purchase_units: #{@purchase_units.inspect}, status: #{@status.inspect},"\
      " links: #{@links.inspect}>"
    end
  end
end

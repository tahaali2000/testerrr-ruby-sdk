# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Provides additional details to process a payment using a `card` that has
  # been stored or is intended to be stored (also referred to as
  # stored_credential or card-on-file).<br/>Parameter
  # compatibility:<br/><ul><li>`payment_type=ONE_TIME` is compatible only with
  # `payment_initiator=CUSTOMER`.</li><li>`usage=FIRST` is compatible only with
  # `payment_initiator=CUSTOMER`.</li><li>`previous_transaction_reference` or
  # `previous_network_transaction_reference` is compatible only with
  # `payment_initiator=MERCHANT`.</li><li>Only one of the parameters -
  # `previous_transaction_reference` and
  # `previous_network_transaction_reference` - can be present in the
  # request.</li></ul>
  class CardStoredCredential < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The person or party who initiated or triggered the payment.
    # @return [PaymentInitiator]
    attr_accessor :payment_initiator

    # Indicates the type of the stored payment_source payment.
    # @return [StoredPaymentSourcePaymentType]
    attr_accessor :payment_type

    # Indicates if this is a `first` or `subsequent` payment using a stored
    # payment source (also referred to as stored credential or card on file).
    # @return [StoredPaymentSourceUsageType]
    attr_accessor :usage

    # Reference values used by the card network to identify a transaction.
    # @return [NetworkTransactionReference]
    attr_accessor :previous_network_transaction_reference

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payment_initiator'] = 'payment_initiator'
      @_hash['payment_type'] = 'payment_type'
      @_hash['usage'] = 'usage'
      @_hash['previous_network_transaction_reference'] =
        'previous_network_transaction_reference'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        usage
        previous_network_transaction_reference
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(payment_initiator = nil, payment_type = nil,
                   usage = StoredPaymentSourceUsageType::DERIVED,
                   previous_network_transaction_reference = SKIP)
      @payment_initiator = payment_initiator
      @payment_type = payment_type
      @usage = usage unless usage == SKIP
      unless previous_network_transaction_reference == SKIP
        @previous_network_transaction_reference =
          previous_network_transaction_reference
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      payment_initiator =
        hash.key?('payment_initiator') ? hash['payment_initiator'] : nil
      payment_type = hash.key?('payment_type') ? hash['payment_type'] : nil
      usage = hash['usage'] ||= StoredPaymentSourceUsageType::DERIVED
      if hash['previous_network_transaction_reference']
        previous_network_transaction_reference = NetworkTransactionReference.from_hash(hash['previous_network_transaction_reference'])
      end

      # Create object from extracted values.
      CardStoredCredential.new(payment_initiator,
                               payment_type,
                               usage,
                               previous_network_transaction_reference)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} payment_initiator: #{@payment_initiator}, payment_type: #{@payment_type},"\
      " usage: #{@usage}, previous_network_transaction_reference:"\
      " #{@previous_network_transaction_reference}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} payment_initiator: #{@payment_initiator.inspect}, payment_type:"\
      " #{@payment_type.inspect}, usage: #{@usage.inspect},"\
      ' previous_network_transaction_reference:'\
      " #{@previous_network_transaction_reference.inspect}>"
    end
  end
end

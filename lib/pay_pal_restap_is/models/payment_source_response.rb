# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The payment source used to fund the payment.
  class PaymentSourceResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The payment card to use to fund a payment. Card can be a credit or debit
    # card.
    # @return [CardResponse]
    attr_accessor :card

    # The PayPal Wallet response.
    # @return [PayPalWalletResponse]
    attr_accessor :paypal

    # Information used to pay Bancontact.
    # @return [BancontactPaymentObject]
    attr_accessor :bancontact

    # Information used to pay using BLIK.
    # @return [BLIKPaymentObject]
    attr_accessor :blik

    # Information used to pay using eps.
    # @return [EPSPaymentObject]
    attr_accessor :eps

    # Information needed to pay using giropay.
    # @return [GiropayPaymentObject]
    attr_accessor :giropay

    # Information used to pay using iDEAL.
    # @return [IDEALPaymentObject]
    attr_accessor :ideal

    # Information used to pay using MyBank.
    # @return [MyBankPaymentObject]
    attr_accessor :mybank

    # Information used to pay using P24(Przelewy24).
    # @return [P24PaymentObject]
    attr_accessor :p24

    # Information used to pay using Sofort.
    # @return [SofortPaymentObject]
    attr_accessor :sofort

    # Information needed to pay using Trustly.
    # @return [TrustlyPaymentObject]
    attr_accessor :trustly

    # Information needed to pay using ApplePay.
    # @return [ApplePayPaymentObject]
    attr_accessor :apple_pay

    # Google Pay Wallet payment data.
    # @return [GooglePayWalletResponse]
    attr_accessor :google_pay

    # Venmo wallet response.
    # @return [VenmoWalletResponse]
    attr_accessor :venmo

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['card'] = 'card'
      @_hash['paypal'] = 'paypal'
      @_hash['bancontact'] = 'bancontact'
      @_hash['blik'] = 'blik'
      @_hash['eps'] = 'eps'
      @_hash['giropay'] = 'giropay'
      @_hash['ideal'] = 'ideal'
      @_hash['mybank'] = 'mybank'
      @_hash['p24'] = 'p24'
      @_hash['sofort'] = 'sofort'
      @_hash['trustly'] = 'trustly'
      @_hash['apple_pay'] = 'apple_pay'
      @_hash['google_pay'] = 'google_pay'
      @_hash['venmo'] = 'venmo'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        card
        paypal
        bancontact
        blik
        eps
        giropay
        ideal
        mybank
        p24
        sofort
        trustly
        apple_pay
        google_pay
        venmo
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(card = SKIP, paypal = SKIP, bancontact = SKIP, blik = SKIP,
                   eps = SKIP, giropay = SKIP, ideal = SKIP, mybank = SKIP,
                   p24 = SKIP, sofort = SKIP, trustly = SKIP, apple_pay = SKIP,
                   google_pay = SKIP, venmo = SKIP)
      @card = card unless card == SKIP
      @paypal = paypal unless paypal == SKIP
      @bancontact = bancontact unless bancontact == SKIP
      @blik = blik unless blik == SKIP
      @eps = eps unless eps == SKIP
      @giropay = giropay unless giropay == SKIP
      @ideal = ideal unless ideal == SKIP
      @mybank = mybank unless mybank == SKIP
      @p24 = p24 unless p24 == SKIP
      @sofort = sofort unless sofort == SKIP
      @trustly = trustly unless trustly == SKIP
      @apple_pay = apple_pay unless apple_pay == SKIP
      @google_pay = google_pay unless google_pay == SKIP
      @venmo = venmo unless venmo == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      card = CardResponse.from_hash(hash['card']) if hash['card']
      paypal = PayPalWalletResponse.from_hash(hash['paypal']) if hash['paypal']
      bancontact = BancontactPaymentObject.from_hash(hash['bancontact']) if hash['bancontact']
      blik = BLIKPaymentObject.from_hash(hash['blik']) if hash['blik']
      eps = EPSPaymentObject.from_hash(hash['eps']) if hash['eps']
      giropay = GiropayPaymentObject.from_hash(hash['giropay']) if hash['giropay']
      ideal = IDEALPaymentObject.from_hash(hash['ideal']) if hash['ideal']
      mybank = MyBankPaymentObject.from_hash(hash['mybank']) if hash['mybank']
      p24 = P24PaymentObject.from_hash(hash['p24']) if hash['p24']
      sofort = SofortPaymentObject.from_hash(hash['sofort']) if hash['sofort']
      trustly = TrustlyPaymentObject.from_hash(hash['trustly']) if hash['trustly']
      apple_pay = ApplePayPaymentObject.from_hash(hash['apple_pay']) if hash['apple_pay']
      google_pay = GooglePayWalletResponse.from_hash(hash['google_pay']) if hash['google_pay']
      venmo = VenmoWalletResponse.from_hash(hash['venmo']) if hash['venmo']

      # Create object from extracted values.
      PaymentSourceResponse.new(card,
                                paypal,
                                bancontact,
                                blik,
                                eps,
                                giropay,
                                ideal,
                                mybank,
                                p24,
                                sofort,
                                trustly,
                                apple_pay,
                                google_pay,
                                venmo)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} card: #{@card}, paypal: #{@paypal}, bancontact: #{@bancontact}, blik:"\
      " #{@blik}, eps: #{@eps}, giropay: #{@giropay}, ideal: #{@ideal}, mybank: #{@mybank}, p24:"\
      " #{@p24}, sofort: #{@sofort}, trustly: #{@trustly}, apple_pay: #{@apple_pay}, google_pay:"\
      " #{@google_pay}, venmo: #{@venmo}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} card: #{@card.inspect}, paypal: #{@paypal.inspect}, bancontact:"\
      " #{@bancontact.inspect}, blik: #{@blik.inspect}, eps: #{@eps.inspect}, giropay:"\
      " #{@giropay.inspect}, ideal: #{@ideal.inspect}, mybank: #{@mybank.inspect}, p24:"\
      " #{@p24.inspect}, sofort: #{@sofort.inspect}, trustly: #{@trustly.inspect}, apple_pay:"\
      " #{@apple_pay.inspect}, google_pay: #{@google_pay.inspect}, venmo: #{@venmo.inspect}>"
    end
  end
end

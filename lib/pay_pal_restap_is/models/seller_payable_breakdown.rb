# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The breakdown of the refund.
  class SellerPayableBreakdown < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :gross_amount

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :paypal_fee

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :paypal_fee_in_receivable_currency

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :net_amount

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :net_amount_in_receivable_currency

    # An array of platform or partner fees, commissions, or brokerage fees for
    # the refund.
    # @return [Array[PlatformFee]]
    attr_accessor :platform_fees

    # An array of breakdown values for the net amount. Returned when the
    # currency of the refund is different from the currency of the PayPal
    # account where the payee holds their funds.
    # @return [Array[NetAmountBreakdownItem]]
    attr_accessor :net_amount_breakdown

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :total_refunded_amount

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['gross_amount'] = 'gross_amount'
      @_hash['paypal_fee'] = 'paypal_fee'
      @_hash['paypal_fee_in_receivable_currency'] =
        'paypal_fee_in_receivable_currency'
      @_hash['net_amount'] = 'net_amount'
      @_hash['net_amount_in_receivable_currency'] =
        'net_amount_in_receivable_currency'
      @_hash['platform_fees'] = 'platform_fees'
      @_hash['net_amount_breakdown'] = 'net_amount_breakdown'
      @_hash['total_refunded_amount'] = 'total_refunded_amount'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        gross_amount
        paypal_fee
        paypal_fee_in_receivable_currency
        net_amount
        net_amount_in_receivable_currency
        platform_fees
        net_amount_breakdown
        total_refunded_amount
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(gross_amount = SKIP, paypal_fee = SKIP,
                   paypal_fee_in_receivable_currency = SKIP, net_amount = SKIP,
                   net_amount_in_receivable_currency = SKIP,
                   platform_fees = SKIP, net_amount_breakdown = SKIP,
                   total_refunded_amount = SKIP)
      @gross_amount = gross_amount unless gross_amount == SKIP
      @paypal_fee = paypal_fee unless paypal_fee == SKIP
      unless paypal_fee_in_receivable_currency == SKIP
        @paypal_fee_in_receivable_currency =
          paypal_fee_in_receivable_currency
      end
      @net_amount = net_amount unless net_amount == SKIP
      unless net_amount_in_receivable_currency == SKIP
        @net_amount_in_receivable_currency =
          net_amount_in_receivable_currency
      end
      @platform_fees = platform_fees unless platform_fees == SKIP
      @net_amount_breakdown = net_amount_breakdown unless net_amount_breakdown == SKIP
      @total_refunded_amount = total_refunded_amount unless total_refunded_amount == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      gross_amount = Money.from_hash(hash['gross_amount']) if hash['gross_amount']
      paypal_fee = Money.from_hash(hash['paypal_fee']) if hash['paypal_fee']
      if hash['paypal_fee_in_receivable_currency']
        paypal_fee_in_receivable_currency = Money.from_hash(hash['paypal_fee_in_receivable_currency'])
      end
      net_amount = Money.from_hash(hash['net_amount']) if hash['net_amount']
      if hash['net_amount_in_receivable_currency']
        net_amount_in_receivable_currency = Money.from_hash(hash['net_amount_in_receivable_currency'])
      end
      # Parameter is an array, so we need to iterate through it
      platform_fees = nil
      unless hash['platform_fees'].nil?
        platform_fees = []
        hash['platform_fees'].each do |structure|
          platform_fees << (PlatformFee.from_hash(structure) if structure)
        end
      end

      platform_fees = SKIP unless hash.key?('platform_fees')
      # Parameter is an array, so we need to iterate through it
      net_amount_breakdown = nil
      unless hash['net_amount_breakdown'].nil?
        net_amount_breakdown = []
        hash['net_amount_breakdown'].each do |structure|
          net_amount_breakdown << (NetAmountBreakdownItem.from_hash(structure) if structure)
        end
      end

      net_amount_breakdown = SKIP unless hash.key?('net_amount_breakdown')
      total_refunded_amount = Money.from_hash(hash['total_refunded_amount']) if
        hash['total_refunded_amount']

      # Create object from extracted values.
      SellerPayableBreakdown.new(gross_amount,
                                 paypal_fee,
                                 paypal_fee_in_receivable_currency,
                                 net_amount,
                                 net_amount_in_receivable_currency,
                                 platform_fees,
                                 net_amount_breakdown,
                                 total_refunded_amount)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} gross_amount: #{@gross_amount}, paypal_fee: #{@paypal_fee},"\
      " paypal_fee_in_receivable_currency: #{@paypal_fee_in_receivable_currency}, net_amount:"\
      " #{@net_amount}, net_amount_in_receivable_currency: #{@net_amount_in_receivable_currency},"\
      " platform_fees: #{@platform_fees}, net_amount_breakdown: #{@net_amount_breakdown},"\
      " total_refunded_amount: #{@total_refunded_amount}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} gross_amount: #{@gross_amount.inspect}, paypal_fee: #{@paypal_fee.inspect},"\
      " paypal_fee_in_receivable_currency: #{@paypal_fee_in_receivable_currency.inspect},"\
      " net_amount: #{@net_amount.inspect}, net_amount_in_receivable_currency:"\
      " #{@net_amount_in_receivable_currency.inspect}, platform_fees: #{@platform_fees.inspect},"\
      " net_amount_breakdown: #{@net_amount_breakdown.inspect}, total_refunded_amount:"\
      " #{@total_refunded_amount.inspect}>"
    end
  end
end

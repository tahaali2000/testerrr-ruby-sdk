# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Full representation of a saved payment token.
  class PaymentTokenResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The PayPal-generated ID for the vault token.
    # @return [String]
    attr_accessor :id

    # Customer in merchant's or partner's system of records.
    # @return [CustomerRequest]
    attr_accessor :customer

    # The vaulted payment method details.
    # @return [PaymentTokenResponsePaymentSource]
    attr_accessor :payment_source

    # An array of related [HATEOAS links](/api/rest/responses/#hateoas).
    # @return [Array[LinkDescription]]
    attr_accessor :links

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['customer'] = 'customer'
      @_hash['payment_source'] = 'payment_source'
      @_hash['links'] = 'links'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        customer
        payment_source
        links
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = SKIP, customer = SKIP, payment_source = SKIP,
                   links = SKIP)
      @id = id unless id == SKIP
      @customer = customer unless customer == SKIP
      @payment_source = payment_source unless payment_source == SKIP
      @links = links unless links == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      customer = CustomerRequest.from_hash(hash['customer']) if hash['customer']
      payment_source = PaymentTokenResponsePaymentSource.from_hash(hash['payment_source']) if
        hash['payment_source']
      # Parameter is an array, so we need to iterate through it
      links = nil
      unless hash['links'].nil?
        links = []
        hash['links'].each do |structure|
          links << (LinkDescription.from_hash(structure) if structure)
        end
      end

      links = SKIP unless hash.key?('links')

      # Create object from extracted values.
      PaymentTokenResponse.new(id,
                               customer,
                               payment_source,
                               links)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, customer: #{@customer}, payment_source: #{@payment_source},"\
      " links: #{@links}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, customer: #{@customer.inspect}, payment_source:"\
      " #{@payment_source.inspect}, links: #{@links.inspect}>"
    end
  end
end

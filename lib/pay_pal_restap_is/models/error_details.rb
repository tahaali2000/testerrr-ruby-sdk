# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The error details. Required for client-side `4XX` errors.
  class ErrorDetails < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The field that caused the error. If this field is in the body, set this
    # value to the field's JSON pointer value. Required for client-side errors.
    # @return [String]
    attr_accessor :field

    # The value of the field that caused the error.
    # @return [String]
    attr_accessor :value

    # The location of the field that caused the error. Value is `body`, `path`,
    # or `query`.
    # @return [String]
    attr_accessor :location

    # The unique, fine-grained application-level error code.
    # @return [String]
    attr_accessor :issue

    # An array of request-related [HATEOAS
    # links](/api/rest/responses/#hateoas-links) that are either relevant to the
    # issue by providing additional information or offering potential
    # resolutions.
    # @return [Array[LinkDescription]]
    attr_accessor :links

    # The human-readable description for an issue. The description can change
    # over the lifetime of an API, so clients must not depend on this value.
    # @return [String]
    attr_accessor :description

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['field'] = 'field'
      @_hash['value'] = 'value'
      @_hash['location'] = 'location'
      @_hash['issue'] = 'issue'
      @_hash['links'] = 'links'
      @_hash['description'] = 'description'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        field
        value
        location
        links
        description
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(issue = nil, field = SKIP, value = SKIP, location = 'body',
                   links = SKIP, description = SKIP)
      @field = field unless field == SKIP
      @value = value unless value == SKIP
      @location = location unless location == SKIP
      @issue = issue
      @links = links unless links == SKIP
      @description = description unless description == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      issue = hash.key?('issue') ? hash['issue'] : nil
      field = hash.key?('field') ? hash['field'] : SKIP
      value = hash.key?('value') ? hash['value'] : SKIP
      location = hash['location'] ||= 'body'
      # Parameter is an array, so we need to iterate through it
      links = nil
      unless hash['links'].nil?
        links = []
        hash['links'].each do |structure|
          links << (LinkDescription.from_hash(structure) if structure)
        end
      end

      links = SKIP unless hash.key?('links')
      description = hash.key?('description') ? hash['description'] : SKIP

      # Create object from extracted values.
      ErrorDetails.new(issue,
                       field,
                       value,
                       location,
                       links,
                       description)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} field: #{@field}, value: #{@value}, location: #{@location}, issue:"\
      " #{@issue}, links: #{@links}, description: #{@description}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} field: #{@field.inspect}, value: #{@value.inspect}, location:"\
      " #{@location.inspect}, issue: #{@issue.inspect}, links: #{@links.inspect}, description:"\
      " #{@description.inspect}>"
    end
  end
end

# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The phone number in its canonical international [E.164 numbering plan
  # format](https://www.itu.int/rec/T-REC-E.164/en).
  class PhoneNumberWithCountryCode < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The country calling code (CC), in its canonical international [E.164
    # numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The
    # combined length of the CC and the national number must not be greater than
    # 15 digits. The national number consists of a national destination code
    # (NDC) and subscriber number (SN).
    # @return [String]
    attr_accessor :country_code

    # The national number, in its canonical international [E.164 numbering plan
    # format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of
    # the country calling code (CC) and the national number must not be greater
    # than 15 digits. The national number consists of a national destination
    # code (NDC) and subscriber number (SN).
    # @return [String]
    attr_accessor :national_number

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['country_code'] = 'country_code'
      @_hash['national_number'] = 'national_number'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(country_code = nil, national_number = nil)
      @country_code = country_code
      @national_number = national_number
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      country_code = hash.key?('country_code') ? hash['country_code'] : nil
      national_number =
        hash.key?('national_number') ? hash['national_number'] : nil

      # Create object from extracted values.
      PhoneNumberWithCountryCode.new(country_code,
                                     national_number)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} country_code: #{@country_code}, national_number: #{@national_number}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} country_code: #{@country_code.inspect}, national_number:"\
      " #{@national_number.inspect}>"
    end
  end
end

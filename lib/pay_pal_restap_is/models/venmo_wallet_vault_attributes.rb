# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Resource consolidating common request and response attirbutes for vaulting
  # Venmo Wallet.
  class VenmoWalletVaultAttributes < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Defines how and when the payment source gets vaulted.
    # @return [StoreInVaultInstruction]
    attr_accessor :store_in_vault

    # The description displayed to Venmo consumer on the approval flow for
    # Venmo, as well as on the Venmo payment token management experience on
    # Venmo.com.
    # @return [String]
    attr_accessor :description

    # Expected business/pricing model for the billing agreement.
    # @return [VenmoPaymentTokenUsagePattern]
    attr_accessor :usage_pattern

    # The usage type associated with the Venmo payment token.
    # @return [VenmoPaymentTokenUsageType]
    attr_accessor :usage_type

    # The customer type associated with the Venmo payment token. This is to
    # indicate whether the customer acting on the merchant / platform is either
    # a business or a consumer.
    # @return [VenmoPaymentTokenCustomerType]
    attr_accessor :customer_type

    # Create multiple payment tokens for the same payer, merchant/platform
    # combination. Use this when the customer has not logged in at
    # merchant/platform. The payment token thus generated, can then also be used
    # to create the customer account at merchant/platform. Use this also when
    # multiple payment tokens are required for the same payer, different
    # customer at merchant/platform. This helps to identify customers distinctly
    # even though they may share the same Venmo account.
    # @return [TrueClass | FalseClass]
    attr_accessor :permit_multiple_payment_tokens

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['store_in_vault'] = 'store_in_vault'
      @_hash['description'] = 'description'
      @_hash['usage_pattern'] = 'usage_pattern'
      @_hash['usage_type'] = 'usage_type'
      @_hash['customer_type'] = 'customer_type'
      @_hash['permit_multiple_payment_tokens'] =
        'permit_multiple_payment_tokens'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        description
        usage_pattern
        customer_type
        permit_multiple_payment_tokens
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(store_in_vault = nil, usage_type = nil, description = SKIP,
                   usage_pattern = SKIP,
                   customer_type = VenmoPaymentTokenCustomerType::CONSUMER,
                   permit_multiple_payment_tokens = false)
      @store_in_vault = store_in_vault
      @description = description unless description == SKIP
      @usage_pattern = usage_pattern unless usage_pattern == SKIP
      @usage_type = usage_type
      @customer_type = customer_type unless customer_type == SKIP
      unless permit_multiple_payment_tokens == SKIP
        @permit_multiple_payment_tokens =
          permit_multiple_payment_tokens
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      store_in_vault =
        hash.key?('store_in_vault') ? hash['store_in_vault'] : nil
      usage_type = hash.key?('usage_type') ? hash['usage_type'] : nil
      description = hash.key?('description') ? hash['description'] : SKIP
      usage_pattern = hash.key?('usage_pattern') ? hash['usage_pattern'] : SKIP
      customer_type =
        hash['customer_type'] ||= VenmoPaymentTokenCustomerType::CONSUMER
      permit_multiple_payment_tokens =
        hash['permit_multiple_payment_tokens'] ||= false

      # Create object from extracted values.
      VenmoWalletVaultAttributes.new(store_in_vault,
                                     usage_type,
                                     description,
                                     usage_pattern,
                                     customer_type,
                                     permit_multiple_payment_tokens)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} store_in_vault: #{@store_in_vault}, description: #{@description},"\
      " usage_pattern: #{@usage_pattern}, usage_type: #{@usage_type}, customer_type:"\
      " #{@customer_type}, permit_multiple_payment_tokens: #{@permit_multiple_payment_tokens}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} store_in_vault: #{@store_in_vault.inspect}, description:"\
      " #{@description.inspect}, usage_pattern: #{@usage_pattern.inspect}, usage_type:"\
      " #{@usage_type.inspect}, customer_type: #{@customer_type.inspect},"\
      " permit_multiple_payment_tokens: #{@permit_multiple_payment_tokens.inspect}>"
    end
  end
end

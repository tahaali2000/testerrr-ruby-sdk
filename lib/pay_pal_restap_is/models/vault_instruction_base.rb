# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Basic vault instruction specification that can be extended by specific
  # payment sources that supports vaulting.
  class VaultInstructionBase < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Defines how and when the payment source gets vaulted.
    # @return [StoreInVaultInstruction]
    attr_accessor :store_in_vault

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['store_in_vault'] = 'store_in_vault'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        store_in_vault
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(store_in_vault = SKIP)
      @store_in_vault = store_in_vault unless store_in_vault == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      store_in_vault =
        hash.key?('store_in_vault') ? hash['store_in_vault'] : SKIP

      # Create object from extracted values.
      VaultInstructionBase.new(store_in_vault)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} store_in_vault: #{@store_in_vault}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} store_in_vault: #{@store_in_vault.inspect}>"
    end
  end
end

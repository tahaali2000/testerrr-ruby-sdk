# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The net amount. Returned when the currency of the refund is different from
  # the currency of the PayPal account where the merchant holds their funds.
  class NetAmountBreakdownItem < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :payable_amount

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :converted_amount

    # The exchange rate that determines the amount to convert from one currency
    # to another currency.
    # @return [ExchangeRate]
    attr_accessor :exchange_rate

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payable_amount'] = 'payable_amount'
      @_hash['converted_amount'] = 'converted_amount'
      @_hash['exchange_rate'] = 'exchange_rate'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        payable_amount
        converted_amount
        exchange_rate
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(payable_amount = SKIP, converted_amount = SKIP,
                   exchange_rate = SKIP)
      @payable_amount = payable_amount unless payable_amount == SKIP
      @converted_amount = converted_amount unless converted_amount == SKIP
      @exchange_rate = exchange_rate unless exchange_rate == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      payable_amount = Money.from_hash(hash['payable_amount']) if hash['payable_amount']
      converted_amount = Money.from_hash(hash['converted_amount']) if hash['converted_amount']
      exchange_rate = ExchangeRate.from_hash(hash['exchange_rate']) if hash['exchange_rate']

      # Create object from extracted values.
      NetAmountBreakdownItem.new(payable_amount,
                                 converted_amount,
                                 exchange_rate)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} payable_amount: #{@payable_amount}, converted_amount: #{@converted_amount},"\
      " exchange_rate: #{@exchange_rate}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} payable_amount: #{@payable_amount.inspect}, converted_amount:"\
      " #{@converted_amount.inspect}, exchange_rate: #{@exchange_rate.inspect}>"
    end
  end
end

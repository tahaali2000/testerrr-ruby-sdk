# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Google Pay Wallet payment data.
  class GooglePayWalletResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The full name representation like Mr J Smith.
    # @return [String]
    attr_accessor :name

    # The internationalized email address.<blockquote><strong>Note:</strong> Up
    # to 64 characters are allowed before and 255 characters are allowed after
    # the <code>@</code> sign. However, the generally accepted maximum length
    # for an email address is 254 characters. The pattern verifies that an
    # unquoted <code>@</code> sign exists.</blockquote>
    # @return [String]
    attr_accessor :email_address

    # The phone number in its canonical international [E.164 numbering plan
    # format](https://www.itu.int/rec/T-REC-E.164/en).
    # @return [PhoneNumberWithCountryCode]
    attr_accessor :phone_number

    # The payment card to use to fund a Google Pay payment response. Can be a
    # credit or debit card.
    # @return [GooglePayCardResponse]
    attr_accessor :card

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['email_address'] = 'email_address'
      @_hash['phone_number'] = 'phone_number'
      @_hash['card'] = 'card'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        name
        email_address
        phone_number
        card
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = SKIP, email_address = SKIP, phone_number = SKIP,
                   card = SKIP)
      @name = name unless name == SKIP
      @email_address = email_address unless email_address == SKIP
      @phone_number = phone_number unless phone_number == SKIP
      @card = card unless card == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : SKIP
      email_address = hash.key?('email_address') ? hash['email_address'] : SKIP
      phone_number = PhoneNumberWithCountryCode.from_hash(hash['phone_number']) if
        hash['phone_number']
      card = GooglePayCardResponse.from_hash(hash['card']) if hash['card']

      # Create object from extracted values.
      GooglePayWalletResponse.new(name,
                                  email_address,
                                  phone_number,
                                  card)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name}, email_address: #{@email_address}, phone_number:"\
      " #{@phone_number}, card: #{@card}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name.inspect}, email_address: #{@email_address.inspect},"\
      " phone_number: #{@phone_number.inspect}, card: #{@card.inspect}>"
    end
  end
end

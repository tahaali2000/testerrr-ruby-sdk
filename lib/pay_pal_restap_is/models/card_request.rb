# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The payment card to use to fund a payment. Can be a credit or debit
  # card.<blockquote><strong>Note:</strong> Passing card number, cvv and expiry
  # directly via the API requires <a
  # href="https://www.pcisecuritystandards.org/pci_security/completing_self_asse
  # ssment"> PCI SAQ D compliance</a>. <br>*PayPal offers a mechanism by which
  # you do not have to take on the <strong>PCI SAQ D</strong> burden by using
  # hosted fields - refer to <a
  # href="https://developer.paypal.com/docs/checkout/advanced/integrate/">this
  # Integration Guide</a>*.</blockquote>
  class CardRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The card holder's name as it appears on the card.
    # @return [String]
    attr_accessor :name

    # The primary account number (PAN) for the payment card.
    # @return [String]
    attr_accessor :number

    # The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date
    # and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
    # @return [String]
    attr_accessor :expiry

    # The three- or four-digit security code of the card. Also known as the CVV,
    # CVC, CVN, CVE, or CID. This parameter cannot be present in the request
    # when `payment_initiator=MERCHANT`.
    # @return [String]
    attr_accessor :security_code

    # The portable international postal address. Maps to
    # [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/
    # wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls:
    # the autocomplete
    # attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-co
    # ntrols-the-autocomplete-attribute).
    # @return [Address]
    attr_accessor :billing_address

    # Additional attributes associated with the use of this card.
    # @return [CardAttributes]
    attr_accessor :attributes

    # The PayPal-generated ID for the vaulted payment source. This ID should be
    # stored on the merchant's server so the saved payment source can be used
    # for future transactions.
    # @return [String]
    attr_accessor :vault_id

    # Provides additional details to process a payment using a `card` that has
    # been stored or is intended to be stored (also referred to as
    # stored_credential or card-on-file).<br/>Parameter
    # compatibility:<br/><ul><li>`payment_type=ONE_TIME` is compatible only with
    # `payment_initiator=CUSTOMER`.</li><li>`usage=FIRST` is compatible only
    # with
    # `payment_initiator=CUSTOMER`.</li><li>`previous_transaction_reference` or
    # `previous_network_transaction_reference` is compatible only with
    # `payment_initiator=MERCHANT`.</li><li>Only one of the parameters -
    # `previous_transaction_reference` and
    # `previous_network_transaction_reference` - can be present in the
    # request.</li></ul>
    # @return [CardStoredCredential]
    attr_accessor :stored_credential

    # The Third Party Network token used to fund a payment.
    # @return [NetworkToken]
    attr_accessor :network_token

    # Customizes the payer experience during the 3DS Approval for payment.
    # @return [CardExperienceContext]
    attr_accessor :experience_context

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['number'] = 'number'
      @_hash['expiry'] = 'expiry'
      @_hash['security_code'] = 'security_code'
      @_hash['billing_address'] = 'billing_address'
      @_hash['attributes'] = 'attributes'
      @_hash['vault_id'] = 'vault_id'
      @_hash['stored_credential'] = 'stored_credential'
      @_hash['network_token'] = 'network_token'
      @_hash['experience_context'] = 'experience_context'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        name
        number
        expiry
        security_code
        billing_address
        attributes
        vault_id
        stored_credential
        network_token
        experience_context
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = SKIP, number = SKIP, expiry = SKIP,
                   security_code = SKIP, billing_address = SKIP,
                   attributes = SKIP, vault_id = SKIP, stored_credential = SKIP,
                   network_token = SKIP, experience_context = SKIP)
      @name = name unless name == SKIP
      @number = number unless number == SKIP
      @expiry = expiry unless expiry == SKIP
      @security_code = security_code unless security_code == SKIP
      @billing_address = billing_address unless billing_address == SKIP
      @attributes = attributes unless attributes == SKIP
      @vault_id = vault_id unless vault_id == SKIP
      @stored_credential = stored_credential unless stored_credential == SKIP
      @network_token = network_token unless network_token == SKIP
      @experience_context = experience_context unless experience_context == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : SKIP
      number = hash.key?('number') ? hash['number'] : SKIP
      expiry = hash.key?('expiry') ? hash['expiry'] : SKIP
      security_code = hash.key?('security_code') ? hash['security_code'] : SKIP
      billing_address = Address.from_hash(hash['billing_address']) if hash['billing_address']
      attributes = CardAttributes.from_hash(hash['attributes']) if hash['attributes']
      vault_id = hash.key?('vault_id') ? hash['vault_id'] : SKIP
      stored_credential = CardStoredCredential.from_hash(hash['stored_credential']) if
        hash['stored_credential']
      network_token = NetworkToken.from_hash(hash['network_token']) if hash['network_token']
      experience_context = CardExperienceContext.from_hash(hash['experience_context']) if
        hash['experience_context']

      # Create object from extracted values.
      CardRequest.new(name,
                      number,
                      expiry,
                      security_code,
                      billing_address,
                      attributes,
                      vault_id,
                      stored_credential,
                      network_token,
                      experience_context)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name}, number: #{@number}, expiry: #{@expiry}, security_code:"\
      " #{@security_code}, billing_address: #{@billing_address}, attributes: #{@attributes},"\
      " vault_id: #{@vault_id}, stored_credential: #{@stored_credential}, network_token:"\
      " #{@network_token}, experience_context: #{@experience_context}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name.inspect}, number: #{@number.inspect}, expiry:"\
      " #{@expiry.inspect}, security_code: #{@security_code.inspect}, billing_address:"\
      " #{@billing_address.inspect}, attributes: #{@attributes.inspect}, vault_id:"\
      " #{@vault_id.inspect}, stored_credential: #{@stored_credential.inspect}, network_token:"\
      " #{@network_token.inspect}, experience_context: #{@experience_context.inspect}>"
    end
  end
end

# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The details of the items in the shipment.
  class OrderTrackerItem < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The item name or title.
    # @return [String]
    attr_accessor :name

    # The item quantity. Must be a whole number.
    # @return [String]
    attr_accessor :quantity

    # The stock keeping unit (SKU) for the item. This can contain unicode
    # characters.
    # @return [String]
    attr_accessor :sku

    # The URL to the item being purchased. Visible to buyer and used in buyer
    # experiences.
    # @return [String]
    attr_accessor :url

    # The URL of the item's image. File type and size restrictions apply. An
    # image that violates these restrictions will not be honored.
    # @return [String]
    attr_accessor :image_url

    # The Universal Product Code of the item.
    # @return [UniversalProductCode]
    attr_accessor :upc

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['quantity'] = 'quantity'
      @_hash['sku'] = 'sku'
      @_hash['url'] = 'url'
      @_hash['image_url'] = 'image_url'
      @_hash['upc'] = 'upc'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        name
        quantity
        sku
        url
        image_url
        upc
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = SKIP, quantity = SKIP, sku = SKIP, url = SKIP,
                   image_url = SKIP, upc = SKIP)
      @name = name unless name == SKIP
      @quantity = quantity unless quantity == SKIP
      @sku = sku unless sku == SKIP
      @url = url unless url == SKIP
      @image_url = image_url unless image_url == SKIP
      @upc = upc unless upc == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : SKIP
      quantity = hash.key?('quantity') ? hash['quantity'] : SKIP
      sku = hash.key?('sku') ? hash['sku'] : SKIP
      url = hash.key?('url') ? hash['url'] : SKIP
      image_url = hash.key?('image_url') ? hash['image_url'] : SKIP
      upc = UniversalProductCode.from_hash(hash['upc']) if hash['upc']

      # Create object from extracted values.
      OrderTrackerItem.new(name,
                           quantity,
                           sku,
                           url,
                           image_url,
                           upc)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name}, quantity: #{@quantity}, sku: #{@sku}, url: #{@url},"\
      " image_url: #{@image_url}, upc: #{@upc}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name.inspect}, quantity: #{@quantity.inspect}, sku:"\
      " #{@sku.inspect}, url: #{@url.inspect}, image_url: #{@image_url.inspect}, upc:"\
      " #{@upc.inspect}>"
    end
  end
end

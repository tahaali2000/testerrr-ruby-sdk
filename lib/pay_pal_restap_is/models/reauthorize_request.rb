# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Reauthorizes an authorized PayPal account payment, by ID. To ensure that
  # funds are still available, reauthorize a payment after its initial three-day
  # honor period expires. You can reauthorize a payment only once from days four
  # to 29.<br/><br/>If 30 days have transpired since the date of the original
  # authorization, you must create an authorized payment instead of
  # reauthorizing the original authorized payment.<br/><br/>A reauthorized
  # payment itself has a new honor period of three days.<br/><br/>You can
  # reauthorize an authorized payment once. The allowed amount depends on
  # context and geography, for example in US it is up to 115% of the original
  # authorized amount, not to exceed an increase of $75 USD.<br/><br/>Supports
  # only the `amount` request parameter.<blockquote><strong>Note:</strong> This
  # request is currently not supported for Partner use cases.</blockquote>
  class ReauthorizeRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The currency and amount for a financial transaction, such as a balance or
    # payment due.
    # @return [Money]
    attr_accessor :amount

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['amount'] = 'amount'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        amount
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(amount = SKIP)
      @amount = amount unless amount == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      amount = Money.from_hash(hash['amount']) if hash['amount']

      # Create object from extracted values.
      ReauthorizeRequest.new(amount)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} amount: #{@amount}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} amount: #{@amount.inspect}>"
    end
  end
end

# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The payment card to be used to fund a payment. Can be a credit or debit
  # card.
  class ApplePayCard < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The card holder's name as it appears on the card.
    # @return [String]
    attr_accessor :name

    # The last digits of the payment card.
    # @return [String]
    attr_accessor :last_digits

    # Type of card. i.e Credit, Debit and so on.
    # @return [CardType]
    attr_accessor :type

    # The card network or brand. Applies to credit, debit, gift, and payment
    # cards.
    # @return [CardBrand]
    attr_accessor :brand

    # The portable international postal address. Maps to
    # [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/
    # wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls:
    # the autocomplete
    # attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-co
    # ntrols-the-autocomplete-attribute).
    # @return [Address]
    attr_accessor :billing_address

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['last_digits'] = 'last_digits'
      @_hash['type'] = 'type'
      @_hash['brand'] = 'brand'
      @_hash['billing_address'] = 'billing_address'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        name
        last_digits
        type
        brand
        billing_address
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = SKIP, last_digits = SKIP, type = SKIP, brand = SKIP,
                   billing_address = SKIP)
      @name = name unless name == SKIP
      @last_digits = last_digits unless last_digits == SKIP
      @type = type unless type == SKIP
      @brand = brand unless brand == SKIP
      @billing_address = billing_address unless billing_address == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : SKIP
      last_digits = hash.key?('last_digits') ? hash['last_digits'] : SKIP
      type = hash.key?('type') ? hash['type'] : SKIP
      brand = hash.key?('brand') ? hash['brand'] : SKIP
      billing_address = Address.from_hash(hash['billing_address']) if hash['billing_address']

      # Create object from extracted values.
      ApplePayCard.new(name,
                       last_digits,
                       type,
                       brand,
                       billing_address)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name}, last_digits: #{@last_digits}, type: #{@type}, brand:"\
      " #{@brand}, billing_address: #{@billing_address}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name.inspect}, last_digits: #{@last_digits.inspect}, type:"\
      " #{@type.inspect}, brand: #{@brand.inspect}, billing_address: #{@billing_address.inspect}>"
    end
  end
end

# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Address request details.
  class AddressDetails < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The first line of the address, such as number and street, for example,
    # `173 Drury Lane`. Needed for data entry, and Compliance and Risk checks.
    # This field needs to pass the full address.
    # @return [String]
    attr_accessor :address_line_1

    # The second line of the address, for example, a suite or apartment number.
    # @return [String]
    attr_accessor :address_line_2

    # A city, town, or village. Smaller than `admin_area_level_1`.
    # @return [String]
    attr_accessor :admin_area_2

    # The highest-level sub-division in a country, which is usually a province,
    # state, or ISO-3166-2 subdivision. This data is formatted for postal
    # delivery, for example, `CA` and not `California`. Value, by country,
    # is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A
    # province.</li><li>Japan. A prefecture.</li><li>Switzerland. A
    # *kanton*.</li></ul>
    # @return [String]
    attr_accessor :admin_area_1

    # The postal code, which is the ZIP code or equivalent. Typically required
    # for countries with a postal code or an equivalent. See [postal
    # code](https://en.wikipedia.org/wiki/Postal_code).
    # @return [String]
    attr_accessor :postal_code

    # The [2-character ISO 3166-1 code](/api/rest/reference/country-codes/) that
    # identifies the country or region.<blockquote><strong>Note:</strong> The
    # country code for Great Britain is <code>GB</code> and not <code>UK</code>
    # as used in the top-level domain names for that country. Use the `C2`
    # country code for China worldwide for comparable uncontrolled price (CUP)
    # method, bank card, and cross-border transactions.</blockquote>
    # @return [String]
    attr_accessor :country_code

    # The name of the party.
    # @return [Name]
    attr_accessor :name

    # The resource ID of the address.
    # @return [String]
    attr_accessor :id

    # The name of the company or business associated to the address.
    # @return [String]
    attr_accessor :company

    # The phone number that can go on the mailing label with the address to
    # track the shipping. Phone number is in E.164 format.
    # @return [String]
    attr_accessor :phone

    # The phone number, in its canonical international [E.164 numbering plan
    # format](https://www.itu.int/rec/T-REC-E.164/en).
    # @return [Phone]
    attr_accessor :phone_number

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['address_line_1'] = 'address_line_1'
      @_hash['address_line_2'] = 'address_line_2'
      @_hash['admin_area_2'] = 'admin_area_2'
      @_hash['admin_area_1'] = 'admin_area_1'
      @_hash['postal_code'] = 'postal_code'
      @_hash['country_code'] = 'country_code'
      @_hash['name'] = 'name'
      @_hash['id'] = 'id'
      @_hash['company'] = 'company'
      @_hash['phone'] = 'phone'
      @_hash['phone_number'] = 'phone_number'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        address_line_1
        address_line_2
        admin_area_2
        admin_area_1
        postal_code
        name
        id
        company
        phone
        phone_number
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(country_code = nil, address_line_1 = SKIP,
                   address_line_2 = SKIP, admin_area_2 = SKIP,
                   admin_area_1 = SKIP, postal_code = SKIP, name = SKIP,
                   id = SKIP, company = SKIP, phone = SKIP, phone_number = SKIP)
      @address_line_1 = address_line_1 unless address_line_1 == SKIP
      @address_line_2 = address_line_2 unless address_line_2 == SKIP
      @admin_area_2 = admin_area_2 unless admin_area_2 == SKIP
      @admin_area_1 = admin_area_1 unless admin_area_1 == SKIP
      @postal_code = postal_code unless postal_code == SKIP
      @country_code = country_code
      @name = name unless name == SKIP
      @id = id unless id == SKIP
      @company = company unless company == SKIP
      @phone = phone unless phone == SKIP
      @phone_number = phone_number unless phone_number == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      country_code = hash.key?('country_code') ? hash['country_code'] : nil
      address_line_1 =
        hash.key?('address_line_1') ? hash['address_line_1'] : SKIP
      address_line_2 =
        hash.key?('address_line_2') ? hash['address_line_2'] : SKIP
      admin_area_2 = hash.key?('admin_area_2') ? hash['admin_area_2'] : SKIP
      admin_area_1 = hash.key?('admin_area_1') ? hash['admin_area_1'] : SKIP
      postal_code = hash.key?('postal_code') ? hash['postal_code'] : SKIP
      name = Name.from_hash(hash['name']) if hash['name']
      id = hash.key?('id') ? hash['id'] : SKIP
      company = hash.key?('company') ? hash['company'] : SKIP
      phone = hash.key?('phone') ? hash['phone'] : SKIP
      phone_number = Phone.from_hash(hash['phone_number']) if hash['phone_number']

      # Create object from extracted values.
      AddressDetails.new(country_code,
                         address_line_1,
                         address_line_2,
                         admin_area_2,
                         admin_area_1,
                         postal_code,
                         name,
                         id,
                         company,
                         phone,
                         phone_number)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} address_line_1: #{@address_line_1}, address_line_2: #{@address_line_2},"\
      " admin_area_2: #{@admin_area_2}, admin_area_1: #{@admin_area_1}, postal_code:"\
      " #{@postal_code}, country_code: #{@country_code}, name: #{@name}, id: #{@id}, company:"\
      " #{@company}, phone: #{@phone}, phone_number: #{@phone_number}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} address_line_1: #{@address_line_1.inspect}, address_line_2:"\
      " #{@address_line_2.inspect}, admin_area_2: #{@admin_area_2.inspect}, admin_area_1:"\
      " #{@admin_area_1.inspect}, postal_code: #{@postal_code.inspect}, country_code:"\
      " #{@country_code.inspect}, name: #{@name.inspect}, id: #{@id.inspect}, company:"\
      " #{@company.inspect}, phone: #{@phone.inspect}, phone_number: #{@phone_number.inspect}>"
    end
  end
end

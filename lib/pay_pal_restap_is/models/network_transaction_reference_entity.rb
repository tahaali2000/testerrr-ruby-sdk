# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Previous network transaction reference including id and network.
  class NetworkTransactionReferenceEntity < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Transaction reference id returned by the scheme. For Visa and Amex, this
    # is the "Tran id" field in response. For MasterCard, this is the "BankNet
    # reference id" field in response. For Discover, this is the "NRID" field in
    # response. The pattern we expect for this field from Visa/Amex/CB/Discover
    # is numeric, Mastercard/BNPP is alphanumeric and Paysecure is alphanumeric
    # with special character -.
    # @return [String]
    attr_accessor :id

    # The date that the transaction was authorized by the scheme. This field may
    # not be returned for all networks. MasterCard refers to this field as
    # "BankNet reference date.
    # @return [String]
    attr_accessor :date

    # The card network or brand. Applies to credit, debit, gift, and payment
    # cards.
    # @return [CardBrand]
    attr_accessor :network

    # The date and time, in [Internet date and time
    # format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are
    # required while fractional seconds are
    # optional.<blockquote><strong>Note:</strong> The regular expression
    # provides guidance but does not reject all invalid dates.</blockquote>
    # @return [String]
    attr_accessor :time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['date'] = 'date'
      @_hash['network'] = 'network'
      @_hash['time'] = 'time'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        date
        network
        time
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = nil, date = SKIP, network = SKIP, time = SKIP)
      @id = id
      @date = date unless date == SKIP
      @network = network unless network == SKIP
      @time = time unless time == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : nil
      date = hash.key?('date') ? hash['date'] : SKIP
      network = hash.key?('network') ? hash['network'] : SKIP
      time = hash.key?('time') ? hash['time'] : SKIP

      # Create object from extracted values.
      NetworkTransactionReferenceEntity.new(id,
                                            date,
                                            network,
                                            time)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, date: #{@date}, network: #{@network}, time: #{@time}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, date: #{@date.inspect}, network: #{@network.inspect},"\
      " time: #{@time.inspect}>"
    end
  end
end

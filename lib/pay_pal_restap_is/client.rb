# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  #  pay_pal_restap_is client class.
  class Client
    include CoreLibrary
    attr_reader :config, :auth_managers

    # Returns the configured authentication Oauth2 instance.
    def oauth2
      @auth_managers['Oauth2']
    end

    # Access to orders controller.
    # @return [OrdersController] Returns the controller instance.
    def orders
      @orders ||= OrdersController.new @global_configuration
    end

    # Access to payments controller.
    # @return [PaymentsController] Returns the controller instance.
    def payments
      @payments ||= PaymentsController.new @global_configuration
    end

    # Access to vault controller.
    # @return [VaultController] Returns the controller instance.
    def vault
      @vault ||= VaultController.new @global_configuration
    end

    # Access to o_auth_authorization controller.
    # @return [OAuthAuthorizationController] Returns the controller instance.
    def o_auth_authorization
      @o_auth_authorization ||= OAuthAuthorizationController.new @global_configuration
    end

    def initialize(
      connection: nil, adapter: :net_http_persistent, timeout: 60,
      max_retries: 0, retry_interval: 1, backoff_factor: 2,
      retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524, 408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
      retry_methods: %i[get put get put], http_callback: nil,
      logging_configuration: nil, environment: Environment::SANDBOX,
      o_auth_client_id: nil, o_auth_client_secret: nil, o_auth_token: nil,
      client_credentials_auth_credentials: nil, config: nil
    )
      @config = if config.nil?
                  Configuration.new(
                    connection: connection, adapter: adapter, timeout: timeout,
                    max_retries: max_retries, retry_interval: retry_interval,
                    backoff_factor: backoff_factor,
                    retry_statuses: retry_statuses,
                    retry_methods: retry_methods, http_callback: http_callback,
                    logging_configuration: logging_configuration,
                    environment: environment,
                    o_auth_client_id: o_auth_client_id,
                    o_auth_client_secret: o_auth_client_secret,
                    o_auth_token: o_auth_token,
                    client_credentials_auth_credentials: client_credentials_auth_credentials
                  )
                else
                  config
                end
      user_agent_params = BaseController.user_agent_parameters

      @global_configuration = GlobalConfiguration.new(client_configuration: @config)
                                                 .base_uri_executor(@config.method(:get_base_uri))
                                                 .global_errors(BaseController::GLOBAL_ERRORS)
                                                 .user_agent(BaseController.user_agent,
                                                             agent_parameters: user_agent_params)

      initialize_auth_managers(@global_configuration)
      @global_configuration = @global_configuration.auth_managers(@auth_managers)
    end

    # Initializes the auth managers hash used for authenticating API calls.
    # @param [GlobalConfiguration] global_config The global configuration of the SDK)
    def initialize_auth_managers(global_config)
      @auth_managers = {}
      http_client_config = global_config.client_configuration
      %w[Oauth2].each { |auth| @auth_managers[auth] = nil }
      @auth_managers['Oauth2'] = OAuth2.new(http_client_config.client_credentials_auth_credentials,
                                            global_config)
    end
  end
end

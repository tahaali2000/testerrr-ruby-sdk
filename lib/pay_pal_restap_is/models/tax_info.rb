# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The tax ID of the customer. The customer is also known as the payer. Both
  # `tax_id` and `tax_id_type` are required.
  class TaxInfo < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The customer's tax ID value.
    # @return [String]
    attr_accessor :tax_id

    # The customer's tax ID type.
    # @return [TaxIdType]
    attr_accessor :tax_id_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['tax_id'] = 'tax_id'
      @_hash['tax_id_type'] = 'tax_id_type'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(tax_id = nil, tax_id_type = nil)
      @tax_id = tax_id
      @tax_id_type = tax_id_type
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      tax_id = hash.key?('tax_id') ? hash['tax_id'] : nil
      tax_id_type = hash.key?('tax_id_type') ? hash['tax_id_type'] : nil

      # Create object from extracted values.
      TaxInfo.new(tax_id,
                  tax_id_type)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} tax_id: #{@tax_id}, tax_id_type: #{@tax_id_type}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} tax_id: #{@tax_id.inspect}, tax_id_type: #{@tax_id_type.inspect}>"
    end
  end
end

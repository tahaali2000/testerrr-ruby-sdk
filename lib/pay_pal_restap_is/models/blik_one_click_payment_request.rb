# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # Information used to pay using BLIK one-click flow.
  class BLIKOneClickPaymentRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The 6-digit code used to authenticate a consumer within BLIK.
    # @return [String]
    attr_accessor :auth_code

    # The merchant generated, unique reference serving as a primary identifier
    # for accounts connected between Blik and a merchant.
    # @return [String]
    attr_accessor :consumer_reference

    # A bank defined identifier used as a display name to allow the payer to
    # differentiate between multiple registered bank accounts.
    # @return [String]
    attr_accessor :alias_label

    # A Blik-defined identifier for a specific Blik-enabled bank account that is
    # associated with a given merchant. Used only in conjunction with a Consumer
    # Reference.
    # @return [String]
    attr_accessor :alias_key

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['auth_code'] = 'auth_code'
      @_hash['consumer_reference'] = 'consumer_reference'
      @_hash['alias_label'] = 'alias_label'
      @_hash['alias_key'] = 'alias_key'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        auth_code
        alias_label
        alias_key
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(consumer_reference = nil, auth_code = SKIP,
                   alias_label = SKIP, alias_key = SKIP)
      @auth_code = auth_code unless auth_code == SKIP
      @consumer_reference = consumer_reference
      @alias_label = alias_label unless alias_label == SKIP
      @alias_key = alias_key unless alias_key == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      consumer_reference =
        hash.key?('consumer_reference') ? hash['consumer_reference'] : nil
      auth_code = hash.key?('auth_code') ? hash['auth_code'] : SKIP
      alias_label = hash.key?('alias_label') ? hash['alias_label'] : SKIP
      alias_key = hash.key?('alias_key') ? hash['alias_key'] : SKIP

      # Create object from extracted values.
      BLIKOneClickPaymentRequest.new(consumer_reference,
                                     auth_code,
                                     alias_label,
                                     alias_key)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} auth_code: #{@auth_code}, consumer_reference: #{@consumer_reference},"\
      " alias_label: #{@alias_label}, alias_key: #{@alias_key}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} auth_code: #{@auth_code.inspect}, consumer_reference:"\
      " #{@consumer_reference.inspect}, alias_label: #{@alias_label.inspect}, alias_key:"\
      " #{@alias_key.inspect}>"
    end
  end
end

# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The tracking details of an order.
  class OrderTrackerRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The tracking number for the shipment. This property supports Unicode.
    # @return [String]
    attr_accessor :tracking_number

    # The carrier for the shipment. Some carriers have a global version as well
    # as local subsidiaries. The subsidiaries are repeated over many countries
    # and might also have an entry in the global list. Choose the carrier for
    # your country. If the carrier is not available for your country, choose the
    # global version of the carrier. If your carrier name is not in the list,
    # set `carrier` to `OTHER` and set carrier name in `carrier_name_other`. For
    # allowed values, see <a
    # href="/docs/tracking/reference/carriers/">Carriers</a>.
    # @return [ShipmentCarrier]
    attr_accessor :carrier

    # The name of the carrier for the shipment. Provide this value only if the
    # carrier parameter is OTHER. This property supports Unicode.
    # @return [String]
    attr_accessor :carrier_name_other

    # The PayPal capture ID.
    # @return [String]
    attr_accessor :capture_id

    # If true, sends an email notification to the payer of the PayPal
    # transaction. The email contains the tracking information that was uploaded
    # through the API.
    # @return [TrueClass | FalseClass]
    attr_accessor :notify_payer

    # An array of details of items in the shipment.
    # @return [Array[OrderTrackerItem]]
    attr_accessor :items

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['tracking_number'] = 'tracking_number'
      @_hash['carrier'] = 'carrier'
      @_hash['carrier_name_other'] = 'carrier_name_other'
      @_hash['capture_id'] = 'capture_id'
      @_hash['notify_payer'] = 'notify_payer'
      @_hash['items'] = 'items'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        tracking_number
        carrier
        carrier_name_other
        notify_payer
        items
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(capture_id = nil, tracking_number = SKIP, carrier = SKIP,
                   carrier_name_other = SKIP, notify_payer = false,
                   items = SKIP)
      @tracking_number = tracking_number unless tracking_number == SKIP
      @carrier = carrier unless carrier == SKIP
      @carrier_name_other = carrier_name_other unless carrier_name_other == SKIP
      @capture_id = capture_id
      @notify_payer = notify_payer unless notify_payer == SKIP
      @items = items unless items == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      capture_id = hash.key?('capture_id') ? hash['capture_id'] : nil
      tracking_number =
        hash.key?('tracking_number') ? hash['tracking_number'] : SKIP
      carrier = hash.key?('carrier') ? hash['carrier'] : SKIP
      carrier_name_other =
        hash.key?('carrier_name_other') ? hash['carrier_name_other'] : SKIP
      notify_payer = hash['notify_payer'] ||= false
      # Parameter is an array, so we need to iterate through it
      items = nil
      unless hash['items'].nil?
        items = []
        hash['items'].each do |structure|
          items << (OrderTrackerItem.from_hash(structure) if structure)
        end
      end

      items = SKIP unless hash.key?('items')

      # Create object from extracted values.
      OrderTrackerRequest.new(capture_id,
                              tracking_number,
                              carrier,
                              carrier_name_other,
                              notify_payer,
                              items)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} tracking_number: #{@tracking_number}, carrier: #{@carrier},"\
      " carrier_name_other: #{@carrier_name_other}, capture_id: #{@capture_id}, notify_payer:"\
      " #{@notify_payer}, items: #{@items}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} tracking_number: #{@tracking_number.inspect}, carrier: #{@carrier.inspect},"\
      " carrier_name_other: #{@carrier_name_other.inspect}, capture_id: #{@capture_id.inspect},"\
      " notify_payer: #{@notify_payer.inspect}, items: #{@items.inspect}>"
    end
  end
end

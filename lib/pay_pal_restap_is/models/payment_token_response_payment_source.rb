# pay_pal_restap_is
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PayPalRestapIs
  # The vaulted payment method details.
  class PaymentTokenResponsePaymentSource < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Full representation of a Card Payment Token including network token.
    # @return [CardPaymentToken]
    attr_accessor :card

    # Full representation of a Card Payment Token including network token.
    # @return [PayPalPaymentToken]
    attr_accessor :paypal

    # Full representation of a Card Payment Token including network token.
    # @return [VenmoPaymentToken]
    attr_accessor :venmo

    # A resource representing a response for Apple Pay.
    # @return [ApplePayPaymentToken]
    attr_accessor :apple_pay

    # Full representation of a Bank Payment Token.
    # @return [BankPaymentToken]
    attr_accessor :bank

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['card'] = 'card'
      @_hash['paypal'] = 'paypal'
      @_hash['venmo'] = 'venmo'
      @_hash['apple_pay'] = 'apple_pay'
      @_hash['bank'] = 'bank'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        card
        paypal
        venmo
        apple_pay
        bank
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(card = SKIP, paypal = SKIP, venmo = SKIP, apple_pay = SKIP,
                   bank = SKIP)
      @card = card unless card == SKIP
      @paypal = paypal unless paypal == SKIP
      @venmo = venmo unless venmo == SKIP
      @apple_pay = apple_pay unless apple_pay == SKIP
      @bank = bank unless bank == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      card = CardPaymentToken.from_hash(hash['card']) if hash['card']
      paypal = PayPalPaymentToken.from_hash(hash['paypal']) if hash['paypal']
      venmo = VenmoPaymentToken.from_hash(hash['venmo']) if hash['venmo']
      apple_pay = ApplePayPaymentToken.from_hash(hash['apple_pay']) if hash['apple_pay']
      bank = BankPaymentToken.from_hash(hash['bank']) if hash['bank']

      # Create object from extracted values.
      PaymentTokenResponsePaymentSource.new(card,
                                            paypal,
                                            venmo,
                                            apple_pay,
                                            bank)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} card: #{@card}, paypal: #{@paypal}, venmo: #{@venmo}, apple_pay:"\
      " #{@apple_pay}, bank: #{@bank}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} card: #{@card.inspect}, paypal: #{@paypal.inspect}, venmo:"\
      " #{@venmo.inspect}, apple_pay: #{@apple_pay.inspect}, bank: #{@bank.inspect}>"
    end
  end
end
